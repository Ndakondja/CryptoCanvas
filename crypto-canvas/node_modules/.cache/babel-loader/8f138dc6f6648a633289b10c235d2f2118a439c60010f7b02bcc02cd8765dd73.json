{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-6ad9d663\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"correlation-matrix\",\n  ref: \"correlationMatrix\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1"],"sources":["/Users/zaheer/Coding/CryptoCanvas/crypto-canvas/src/components/CorrelationMatrix.vue"],"sourcesContent":["<template>\n  <div class=\"correlation-matrix\" ref=\"correlationMatrix\"></div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'CorrelationMatrix',\n  mounted () {\n    fetch('correlation_matrix.json')\n      .then(response => response.json())\n      .then(data => {\n        this.createCorrelationMatrix(data)\n      })\n      .catch(error => console.error('Error fetching data:', error))\n  },\n  methods: {\n    createCorrelationMatrix (data) {\n      const margin = { top: 20, right: 20, bottom: 20, left: 20 }\n      const width = 400 - margin.left - margin.right\n      const height = 400 - margin.top - margin.bottom\n\n      // Append SVG object to the DOM\n      const svg = d3.select(this.$refs.correlationMatrix)\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left}, ${margin.top})`)\n\n      // Create scales\n      const x = d3.scaleBand()\n        .range([0, width])\n        .domain(Object.keys(data))\n        .padding(0.05)\n\n      svg.append('g')\n        .attr('transform', `translate(0, ${height})`)\n        .call(d3.axisBottom(x).tickSize(0))\n        .select('.domain').remove()\n\n      const y = d3.scaleBand()\n        .range([height, 0])\n        .domain(Object.keys(data))\n        .padding(0.05)\n\n      svg.append('g')\n        .call(d3.axisLeft(y).tickSize(0))\n        .select('.domain').remove()\n\n      // Build color scale\n      const myColor = d3.scaleSequential()\n        .interpolator(d3.interpolateInferno)\n        .domain([0, 1])\n\n      // Create the squares\n      svg.selectAll()\n        .data(Object.entries(data).flatMap(([key, value]) => {\n          return Object.keys(value).map(subKey => {\n            return { group1: key, group2: subKey, value: value[subKey] }\n          })\n        }))\n        .enter()\n        .append('rect')\n        .attr('x', d => x(d.group1))\n        .attr('y', d => y(d.group2))\n        .attr('width', x.bandwidth())\n        .attr('height', y.bandwidth())\n        .style('fill', d => myColor(d.value))\n    }\n  }\n}\n</script>\n\n<style scoped>\n.correlation-matrix {\n  width: 100%;\n  height: 400px;\n}\n</style>\n"],"mappings":";;;EACOA,KAAK,EAAC,oBAAoB;EAACC,GAAG,EAAC;;;uBAApCC,mBAAA,CAA8D,OAA9DC,UAA8D"},"metadata":{},"sourceType":"module","externalDependencies":[]}