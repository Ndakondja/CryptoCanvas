{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Coin\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Average Price\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Standard Deviation\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Percentage Growth\")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"table\", null, [_hoisted_1, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.coinStats, stat => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: stat.coin\n    }, [_createElementVNode(\"td\", null, _toDisplayString(stat.coin), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(stat.averagePrice.toFixed(2)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(stat.stdDeviation.toFixed(2)), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(stat.percentGrowth.toFixed(2)) + \"%\", 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","coinStats","stat","key","coin","_toDisplayString","averagePrice","toFixed","stdDeviation","percentGrowth"],"sources":["/Users/stefanstapelberg/Desktop/FSD_PROJECT/CryptoCanvas/crypto-canvas/src/components/CoinStats.vue"],"sourcesContent":["<template>\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>Coin</th>\n            <th>Average Price</th>\n            <th>Standard Deviation</th>\n            <th>Percentage Growth</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"stat in coinStats\" :key=\"stat.coin\">\n            <td>{{ stat.coin }}</td>\n            <td>{{ stat.averagePrice.toFixed(2) }}</td>\n            <td>{{ stat.stdDeviation.toFixed(2) }}</td>\n            <td>{{ stat.percentGrowth.toFixed(2) }}%</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </template>\n\n<script>\nimport axios from 'axios'\nimport config from './config'\n\nexport default {\n  name: 'CoinStatistics',\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  data () {\n    return {\n      coinStats: []\n    }\n  },\n  watch: {\n    selectedTimeRange: 'calculateStats',\n    selectedCoins: 'calculateStats'\n  },\n  methods: {\n    async calculateStats () {\n      // Fetch the price data based on selected time range and coins\n      try {\n        const response = await axios.get(`${config.backendApiUrl}/getAllCoinData`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        })\n\n        this.coinStats = this.selectedCoins.map(coin => {\n          const coinData = response.data.filter(data => data.coin === coin)\n          const prices = coinData.map(data => data.price)\n\n          // Calculate the average price\n          const averagePrice = prices.reduce((acc, price) => acc + price, 0) / prices.length\n\n          // Calculate the standard deviation\n          const mean = averagePrice\n          const squareDiffs = prices.map(price => Math.pow(price - mean, 2))\n          const avgSquareDiff = squareDiffs.reduce((acc, diff) => acc + diff, 0) / squareDiffs.length\n          const stdDeviation = Math.sqrt(avgSquareDiff)\n\n          // Calculate the percentage growth\n          const startPrice = prices[0]\n          const endPrice = prices[prices.length - 1]\n          const percentGrowth = ((endPrice - startPrice) / startPrice) * 100\n\n          return {\n            coin,\n            averagePrice,\n            stdDeviation,\n            percentGrowth\n          }\n        })\n      } catch (error) {\n        console.error('Error calculating statistics:', error)\n      }\n    }\n  },\n  created () {\n    this.calculateStats()\n  }\n}\n</script>\n\n  <style>\n  table {\n    width: 100%;\n    border-collapse: collapse;\n  }\n\n  th, td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n  }\n\n  th {\n    background-color: #f2f2f2;\n  }\n  </style>\n"],"mappings":";gCAGQA,mBAAA,CAOQ,gB,aANNA,mBAAA,CAKK,a,aAJHA,mBAAA,CAAa,YAAT,MAAI,G,aACRA,mBAAA,CAAsB,YAAlB,eAAa,G,aACjBA,mBAAA,CAA2B,YAAvB,oBAAkB,G,aACtBA,mBAAA,CAA0B,YAAtB,mBAAiB,E;;;uBAP7BC,mBAAA,CAmBM,cAlBJD,mBAAA,CAiBQ,gBAhBNE,UAOQ,EACRF,mBAAA,CAOQ,iB,kBANNC,mBAAA,CAKKE,SAAA,QAAAC,WAAA,CALcC,KAAA,CAAAC,SAAS,EAAjBC,IAAI;yBAAfN,mBAAA,CAKK;MAL0BO,GAAG,EAAED,IAAI,CAACE;QACvCT,mBAAA,CAAwB,YAAAU,gBAAA,CAAjBH,IAAI,CAACE,IAAI,kBAChBT,mBAAA,CAA2C,YAAAU,gBAAA,CAApCH,IAAI,CAACI,YAAY,CAACC,OAAO,qBAChCZ,mBAAA,CAA2C,YAAAU,gBAAA,CAApCH,IAAI,CAACM,YAAY,CAACD,OAAO,qBAChCZ,mBAAA,CAA6C,YAAAU,gBAAA,CAAtCH,IAAI,CAACO,aAAa,CAACF,OAAO,OAAM,GAAC,gB"},"metadata":{},"sourceType":"module","externalDependencies":[]}