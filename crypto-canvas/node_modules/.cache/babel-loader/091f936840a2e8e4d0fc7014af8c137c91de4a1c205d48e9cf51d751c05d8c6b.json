{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"volatility-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["C:\\Projects\\CryptoCanvas\\crypto-canvas\\src\\components\\VolatilityComparison.vue"],"sourcesContent":["<template>\n  <div id=\"volatility-chart\"></div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport axios from 'axios'\nimport config from './config'\n\nexport default {\n  // eslint-disable-next-line vue/multi-word-component-names\n  name: 'Volatility',\n  data () {\n    return {\n      selected_coins: ['Cardano', 'XRP', 'Litecoin', 'Ethereum', 'Bitcoin'], // Default selected coins\n      volatilityData: null\n    }\n  },\n  mounted () {\n    this.fetchVolatilityData()\n  },\n  methods: {\n    async fetchVolatilityData () {\n      try {\n        const response = await axios.get(config.backendApiUrl.concat('/getCoinVolatilityComparisons'))\n        this.drawVolatilityChart(response.data)\n      } catch (error) {\n        console.error('Error fetching volatility data:', error)\n      }\n    },\n    drawVolatilityChart (rawData) {\n      // Parse data and group by coin\n      const parseTime = d3.timeParse('%a, %d %b %Y %H:%M:%S GMT')\n      const data = rawData.map(d => ({\n        coin: d.Coin,\n        date: parseTime(d.Date),\n        value: +d.Volatility\n      }))\n\n      // Define dimensions and margins\n      const margin = { top: 10, right: 80, bottom: 30, left: 50 }\n      const width = 960 - margin.left - margin.right\n      const height = 500 - margin.top - margin.bottom\n\n      // Remove any existing SVG to avoid overlapping charts\n      d3.select('#volatility-chart').select('svg').remove()\n\n      // Append the svg object\n      const svg = d3.select('#volatility-chart')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      // Add X & Y scales and axes\n      const x = d3.scaleTime().range([0, width])\n      const y = d3.scaleLinear().range([height, 0])\n      x.domain(d3.extent(data, d => d.date))\n      y.domain([0, d3.max(data, d => d.value)])\n\n      // Define the line generator\n      const valueline = d3.line()\n        .x(d => x(d.date))\n        .y(d => y(d.value))\n\n      // Create a color scale\n      const color = d3.scaleOrdinal(d3.schemeCategory10)\n\n      // Add the valueline path for each coin\n      this.selected_coins.forEach(coin => {\n        svg.append('path')\n          .datum(data.filter(d => d.coin === coin))\n          .attr('class', 'line')\n          .attr('d', valueline)\n          .style('stroke', color(coin))\n          .style('fill', 'none')\n      })\n\n      // Add the X Axis\n      svg.append('g')\n        .attr('transform', `translate(0,${height})`)\n        .call(d3.axisBottom(x))\n\n      // Add the Y Axis\n      svg.append('g')\n        .call(d3.axisLeft(y))\n        // ...after your axes have been appended to the SVG\n\n      // Add X axis label:\n      svg.append('text')\n        .attr('text-anchor', 'end')\n        .attr('x', width / 2 + margin.left)\n        .attr('y', height + margin.top + 20)\n        .text('Time')\n\n      // Add Y axis label:\n      svg.append('text')\n        .attr('text-anchor', 'end')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -margin.left + 20)\n        .attr('x', -margin.top - height / 2 + 20)\n        .text('Volatility')\n\n      // Tooltip logic (assuming you have CSS styles defined for .tooltip)\n      const tooltip = d3.select('#volatility-chart').append('div')\n        .attr('class', 'tooltip')\n        .style('opacity', 0)\n\n      const mouseover = function (event, d) {\n        tooltip.transition()\n          .duration(200) // Time in milliseconds for the tooltip to become fully opaque\n          .style('opacity', 0.9) // Fully opaque\n      }\n\n      const mousemove = function (event, d) {\n        tooltip.html('Volatility: ' + d.value + '<br/>Date: ' + d3.timeFormat('%B %d, %Y')(d.date))\n          .style('left', (event.pageX + 10) + 'px') // 10px to the right of the cursor\n          .style('top', (event.pageY - 10) + 'px') // 10px above the cursor\n      }\n\n      const mouseleave = function (event, d) {\n        tooltip.transition()\n          .duration(500) // Time in milliseconds for the tooltip to become fully transparent\n          .style('opacity', 0) // Fully transparent\n      }\n      const legend = svg.append('g')\n        .attr('font-family', 'sans-serif')\n        .attr('font-size', 10)\n        .attr('text-anchor', 'end')\n        .selectAll('g')\n        .data(this.selected_coins.slice().reverse()) // Assuming this.selected_coins contains the list of coins\n        .enter().append('g')\n        .attr('transform', function (d, i) { return 'translate(0,' + i * 20 + ')' })\n\n      // Add rectangles to the legend group\n      legend.append('rect')\n        .attr('x', width - 19)\n        .attr('width', 19)\n        .attr('height', 19)\n        .attr('fill', color) // Assuming color is your d3.scaleOrdinal() for colors\n\n      // Add text labels to the legend group\n      legend.append('text')\n        .attr('x', width - 24)\n        .attr('y', 9.5)\n        .attr('dy', '0.32em')\n        .text(function (d) { return d })\n\n      // Add the scatterplot points\n      svg.selectAll('dot')\n        .data(data)\n        .enter().append('circle')\n        .attr('r', 2)\n        .attr('cx', function (d) { return x(d.date) })\n        .attr('cy', function (d) { return y(d.value) })\n        .attr('fill', function (d) { return color(d.coin) })\n        .on('mouseover', mouseover)\n        .on('mouseout', mouseleave)\n        .on('mousemove', mousemove)\n    }\n\n  }\n}\n</script>\n\n<style>\n.tooltip {\n  position: absolute;\n  text-align: center;\n  padding: 8px;\n  font: 12px sans-serif;\n  background: rgba(255, 255, 255, 0.8); /* Semi-transparent white background */\n  border: 1px solid #333; /* Solid border for contrast */\n  border-radius: 5px;\n  pointer-events: none; /* Prevents the tooltip from capturing mouse events */\n  z-index: 10; /* Ensures the tooltip is above other elements */\n}\n\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAkB;;uBAA1BC,mBAAA,CAAiC,OAAjCC,UAAiC"},"metadata":{},"sourceType":"module","externalDependencies":[]}