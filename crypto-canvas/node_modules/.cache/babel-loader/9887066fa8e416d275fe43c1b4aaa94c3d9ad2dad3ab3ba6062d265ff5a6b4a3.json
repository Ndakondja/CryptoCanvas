{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"volatility-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["C:\\Projects\\CryptoCanvas\\crypto-canvas\\src\\components\\VolatilityComparison.vue"],"sourcesContent":["<template>\n  <div id=\"volatility-chart\"></div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport axios from 'axios'\nimport config from './config'\n\nexport default {\n  // eslint-disable-next-line vue/multi-word-component-names\n  name: 'Volatility',\n  data () {\n    return {\n      selected_coins: ['Cardano', 'XRP', 'Litecoin', 'Ethereum', 'Bitcoin'], // Default selected coins\n      volatilityData: null\n    }\n  },\n  mounted () {\n    this.fetchVolatilityData()\n  },\n  methods: {\n    async fetchVolatilityData () {\n      try {\n        const response = await axios.get(config.backendApiUrl.concat('/getCoinVolatilityComparisons'))\n        this.drawVolatilityChart(response.data)\n      } catch (error) {\n        console.error('Error fetching volatility data:', error)\n      }\n    },\n    drawVolatilityChart (data) {\n      // Parse data\n      const parseTime = d3.timeParse('%a, %d %b %Y %H:%M:%S GMT')\n\n      data.forEach(d => {\n        d.date = parseTime(d.Date) // Parse the date\n        console.log(d.date) // Log to see if the date is parsed correctly\n        d.value = +d.Volatility\n      })\n\n\n      // Define dimensions and margins\n      const margin = { top: 10, right: 80, bottom: 30, left: 50 }\n      const width = 960 - margin.left - margin.right\n      const height = 500 - margin.top - margin.bottom\n\n      // Remove any existing SVG to avoid overlapping charts\n      d3.select('#volatility-chart').select('svg').remove()\n\n      // Append the svg object\n      const svg = d3.select('#volatility-chart')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      // Add X & Y scales and axes\n      const x = d3.scaleTime().range([0, width])\n      const y = d3.scaleLinear().range([height, 0])\n\n      // Scale the range of the data\n      x.domain(d3.extent(data, d => d.date))\n      y.domain([0, d3.max(data, d => d.value)])\n\n      // Define the line\n      const valueline = d3.line()\n        .x(d => x(d.date))\n        .y(d => y(d.value))\n\n      // Add the valueline path for each coin\n      // eslint-disable-next-line camelcase, no-undef\n      this.selected_coins.forEach(coin => {\n        svg.append('path')\n          .data([data.filter(d => d.coin === coin)])\n          .attr('class', 'line')\n          .attr('d', valueline)\n          .style('stroke' /* assign color based on coin */)\n      })\n\n      // Add the X Axis\n      svg.append('g')\n        .attr('transform', `translate(0,${height})`)\n        .call(d3.axisBottom(x))\n\n      // Add the Y Axis\n      svg.append('g')\n        .call(d3.axisLeft(y))\n\n      // Add tooltip\n      const tooltip = d3.select('#volatility-chart')\n        .append('div')\n        .style('opacity', 0)\n        .attr('class', 'tooltip')\n        .style('background-color', 'white')\n        .style('border', 'solid')\n        .style('border-width', '2px')\n        .style('border-radius', '5px')\n        .style('padding', '5px')\n        .style('position', 'absolute')\n\n      // Tooltip event handlers\n      const mouseover = function (event, d) {\n        tooltip.style('opacity', 1)\n        d3.select(this).style('stroke', 'black')\n      }\n\n      const mousemove = function (event, d) {\n        if (d.date) {\n          tooltip.html('Date: ' + d.date.toISOString().substring(0, 10) + '<br>Volatility: ' + d.value.toFixed(2))\n            .style('left', (event.x / 2) + 'px')\n            .style('top', (event.y / 2 - 30) + 'px');\n        }\n      }\n\n\n      const mouseleave = function (event, d) {\n        tooltip.style('opacity', 0)\n        d3.select(this).style('stroke', 'none')\n      }\n\n      // Add the points with tooltips\n      svg.selectAll('dot')\n        .data(data)\n        .enter().append('circle')\n        .attr('r', 5)\n        .attr('cx', d => x(d.date))\n        .attr('cy', d => y(d.value))\n        .on('mouseover', mouseover)\n        .on('mousemove', mousemove)\n        .on('mouseleave', mouseleave)\n    }\n  }\n}\n</script>\n\n<style>\n/* Add styles for your chart and tooltip */\n.tooltip {\n  position: absolute;\n  text-align: center;\n  transition: opacity 0.3s;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAkB;;uBAA1BC,mBAAA,CAAiC,OAAjCC,UAAiC"},"metadata":{},"sourceType":"module","externalDependencies":[]}