{"ast":null,"code":"import axios from 'axios';\nimport config from './config';\nexport default {\n  name: 'CoinStatistics',\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  data() {\n    return {\n      coinStats: []\n    };\n  },\n  watch: {\n    selectedTimeRange: 'calculateStats',\n    selectedCoins: 'calculateStats'\n  },\n  methods: {\n    async calculateStats() {\n      // Fetch the price data based on selected time range and coins\n      try {\n        const response = await axios.get(`${config.backendApiUrl}/getAllCoinData`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        });\n        this.coinStats = this.selectedCoins.map(coin => {\n          const coinData = response.data.filter(data => data.coin === coin);\n          const prices = coinData.map(data => data.price);\n\n          // Calculate the average price\n          const averagePrice = prices.reduce((acc, price) => acc + price, 0) / prices.length;\n\n          // Calculate the standard deviation\n          const mean = averagePrice;\n          const squareDiffs = prices.map(price => Math.pow(price - mean, 2));\n          const avgSquareDiff = squareDiffs.reduce((acc, diff) => acc + diff, 0) / squareDiffs.length;\n          const stdDeviation = Math.sqrt(avgSquareDiff);\n\n          // Calculate the percentage growth\n          const startPrice = prices[0];\n          const endPrice = prices[prices.length - 1];\n          const percentGrowth = (endPrice - startPrice) / startPrice * 100;\n          return {\n            coin,\n            averagePrice,\n            stdDeviation,\n            percentGrowth\n          };\n        });\n      } catch (error) {\n        console.error('Error calculating statistics:', error);\n      }\n    }\n  },\n  created() {\n    this.calculateStats();\n  }\n};","map":{"version":3,"names":["axios","config","name","props","selectedTimeRange","String","selectedCoins","Array","data","coinStats","watch","methods","calculateStats","response","get","backendApiUrl","params","timeRange","coins","join","map","coin","coinData","filter","prices","price","averagePrice","reduce","acc","length","mean","squareDiffs","Math","pow","avgSquareDiff","diff","stdDeviation","sqrt","startPrice","endPrice","percentGrowth","error","console","created"],"sources":["/Users/stefanstapelberg/Desktop/FSD_PROJECT/CryptoCanvas/crypto-canvas/src/components/CoinStats.vue"],"sourcesContent":["<template>\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th>Coin</th>\n            <th>Average Price</th>\n            <th>Standard Deviation</th>\n            <th>Percentage Growth</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"stat in coinStats\" :key=\"stat.coin\">\n            <td>{{ stat.coin }}</td>\n            <td>{{ stat.averagePrice.toFixed(2) }}</td>\n            <td>{{ stat.stdDeviation.toFixed(2) }}</td>\n            <td>{{ stat.percentGrowth.toFixed(2) }}%</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </template>\n\n<script>\nimport axios from 'axios'\nimport config from './config'\n\nexport default {\n  name: 'CoinStatistics',\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  data () {\n    return {\n      coinStats: []\n    }\n  },\n  watch: {\n    selectedTimeRange: 'calculateStats',\n    selectedCoins: 'calculateStats'\n  },\n  methods: {\n    async calculateStats () {\n      // Fetch the price data based on selected time range and coins\n      try {\n        const response = await axios.get(`${config.backendApiUrl}/getAllCoinData`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        })\n\n        this.coinStats = this.selectedCoins.map(coin => {\n          const coinData = response.data.filter(data => data.coin === coin)\n          const prices = coinData.map(data => data.price)\n\n          // Calculate the average price\n          const averagePrice = prices.reduce((acc, price) => acc + price, 0) / prices.length\n\n          // Calculate the standard deviation\n          const mean = averagePrice\n          const squareDiffs = prices.map(price => Math.pow(price - mean, 2))\n          const avgSquareDiff = squareDiffs.reduce((acc, diff) => acc + diff, 0) / squareDiffs.length\n          const stdDeviation = Math.sqrt(avgSquareDiff)\n\n          // Calculate the percentage growth\n          const startPrice = prices[0]\n          const endPrice = prices[prices.length - 1]\n          const percentGrowth = ((endPrice - startPrice) / startPrice) * 100\n\n          return {\n            coin,\n            averagePrice,\n            stdDeviation,\n            percentGrowth\n          }\n        })\n      } catch (error) {\n        console.error('Error calculating statistics:', error)\n      }\n    }\n  },\n  created () {\n    this.calculateStats()\n  }\n}\n</script>\n\n  <style>\n  table {\n    width: 100%;\n    border-collapse: collapse;\n  }\n\n  th, td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n  }\n\n  th {\n    background-color: #f2f2f2;\n  }\n  </style>\n"],"mappings":"AAwBA,OAAOA,KAAI,MAAO,OAAM;AACxB,OAAOC,MAAK,MAAO,UAAS;AAE5B,eAAe;EACbC,IAAI,EAAE,gBAAgB;EACtBC,KAAK,EAAE;IACLC,iBAAiB,EAAEC,MAAM;IACzBC,aAAa,EAAEC;EACjB,CAAC;EACDC,IAAGA,CAAA,EAAK;IACN,OAAO;MACLC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,KAAK,EAAE;IACLN,iBAAiB,EAAE,gBAAgB;IACnCE,aAAa,EAAE;EACjB,CAAC;EACDK,OAAO,EAAE;IACP,MAAMC,cAAaA,CAAA,EAAK;MACtB;MACA,IAAI;QACF,MAAMC,QAAO,GAAI,MAAMb,KAAK,CAACc,GAAG,CAAE,GAAEb,MAAM,CAACc,aAAc,iBAAgB,EAAE;UACzEC,MAAM,EAAE;YACNC,SAAS,EAAE,IAAI,CAACb,iBAAiB;YACjCc,KAAK,EAAE,IAAI,CAACZ,aAAa,CAACa,IAAI,CAAC,GAAG;UACpC;QACF,CAAC;QAED,IAAI,CAACV,SAAQ,GAAI,IAAI,CAACH,aAAa,CAACc,GAAG,CAACC,IAAG,IAAK;UAC9C,MAAMC,QAAO,GAAIT,QAAQ,CAACL,IAAI,CAACe,MAAM,CAACf,IAAG,IAAKA,IAAI,CAACa,IAAG,KAAMA,IAAI;UAChE,MAAMG,MAAK,GAAIF,QAAQ,CAACF,GAAG,CAACZ,IAAG,IAAKA,IAAI,CAACiB,KAAK;;UAE9C;UACA,MAAMC,YAAW,GAAIF,MAAM,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEH,KAAK,KAAKG,GAAE,GAAIH,KAAK,EAAE,CAAC,IAAID,MAAM,CAACK,MAAK;;UAEjF;UACA,MAAMC,IAAG,GAAIJ,YAAW;UACxB,MAAMK,WAAU,GAAIP,MAAM,CAACJ,GAAG,CAACK,KAAI,IAAKO,IAAI,CAACC,GAAG,CAACR,KAAI,GAAIK,IAAI,EAAE,CAAC,CAAC;UACjE,MAAMI,aAAY,GAAIH,WAAW,CAACJ,MAAM,CAAC,CAACC,GAAG,EAAEO,IAAI,KAAKP,GAAE,GAAIO,IAAI,EAAE,CAAC,IAAIJ,WAAW,CAACF,MAAK;UAC1F,MAAMO,YAAW,GAAIJ,IAAI,CAACK,IAAI,CAACH,aAAa;;UAE5C;UACA,MAAMI,UAAS,GAAId,MAAM,CAAC,CAAC;UAC3B,MAAMe,QAAO,GAAIf,MAAM,CAACA,MAAM,CAACK,MAAK,GAAI,CAAC;UACzC,MAAMW,aAAY,GAAK,CAACD,QAAO,GAAID,UAAU,IAAIA,UAAU,GAAI,GAAE;UAEjE,OAAO;YACLjB,IAAI;YACJK,YAAY;YACZU,YAAY;YACZI;UACF;QACF,CAAC;MACH,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK;MACtD;IACF;EACF,CAAC;EACDE,OAAMA,CAAA,EAAK;IACT,IAAI,CAAC/B,cAAc,CAAC;EACtB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}