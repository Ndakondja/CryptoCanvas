{"ast":null,"code":"import * as d3 from 'd3';\nexport default {\n  name: 'VolatilityComparison',\n  mounted() {\n    fetch('volatility_comparison.json').then(response => response.json()).then(rawData => {\n      console.log('Fetched data:', rawData); // Log fetched data\n      const groupedData = this.transformData(rawData);\n      this.createVolatilityComparison(groupedData);\n    }).catch(error => console.error('Error fetching data:', error));\n  },\n  methods: {\n    transformData(rawData) {\n      // Transform rawData into a format suitable for D3\n      const groupedData = d3.groups(rawData, d => d.name).map(([name, values]) => ({\n        name,\n        values\n      }));\n      return groupedData;\n    },\n    createVolatilityComparison(data) {\n      const margin = {\n        top: 10,\n        right: 30,\n        bottom: 30,\n        left: 50\n      };\n      const width = 460 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n      const svg = d3.select(this.$refs.volatilityChart).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n      // Add X axis --> it is a date format\n      const x = d3.scaleTime().domain(d3.extent(rawData, d => new Date(d.date))).range([0, width]);\n      svg.append('g').attr('transform', `translate(0, ${height})`).call(d3.axisBottom(x));\n\n      // Add Y axis\n      const y = d3.scaleLinear().domain([0, d3.max(rawData, d => +d.value)]).range([height, 0]);\n      svg.append('g').call(d3.axisLeft(y));\n\n      // Color scale\n      const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n      // Draw the line for each group\n      data.forEach(crypto => {\n        const line = d3.line().x(d => x(new Date(d.date))).y(d => y(+d.value));\n        svg.append('path').datum(crypto.values).attr('fill', 'none').attr('stroke', color(crypto.name)).attr('stroke-width', 1.5).attr('d', line);\n      });\n    }\n  }\n};","map":{"version":3,"names":["d3","name","mounted","fetch","then","response","json","rawData","console","log","groupedData","transformData","createVolatilityComparison","catch","error","methods","groups","d","map","values","data","margin","top","right","bottom","left","width","height","svg","select","$refs","volatilityChart","append","attr","x","scaleTime","domain","extent","Date","date","range","call","axisBottom","y","scaleLinear","max","value","axisLeft","color","scaleOrdinal","schemeCategory10","forEach","crypto","line","datum"],"sources":["/Users/zaheer/Coding/CryptoCanvas/crypto-canvas/src/components/VolatilityComparison.vue"],"sourcesContent":["<template>\n  <div class=\"volatility-comparison\" ref=\"volatilityChart\"></div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'VolatilityComparison',\n  mounted () {\n    fetch('volatility_comparison.json')\n      .then(response => response.json())\n      .then(rawData => {\n        console.log('Fetched data:', rawData) // Log fetched data\n        const groupedData = this.transformData(rawData)\n        this.createVolatilityComparison(groupedData)\n      })\n      .catch(error => console.error('Error fetching data:', error))\n  },\n  methods: {\n    transformData (rawData) {\n      // Transform rawData into a format suitable for D3\n      const groupedData = d3.groups(rawData, d => d.name)\n        .map(([name, values]) => ({ name, values }))\n      return groupedData\n    },\n\n    createVolatilityComparison (data) {\n      const margin = { top: 10, right: 30, bottom: 30, left: 50 }\n      const width = 460 - margin.left - margin.right\n      const height = 400 - margin.top - margin.bottom\n\n      const svg = d3.select(this.$refs.volatilityChart)\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left}, ${margin.top})`)\n\n      // Add X axis --> it is a date format\n      const x = d3.scaleTime()\n        .domain(d3.extent(rawData, d => new Date(d.date)))\n        .range([0, width])\n      svg.append('g')\n        .attr('transform', `translate(0, ${height})`)\n        .call(d3.axisBottom(x))\n\n      // Add Y axis\n      const y = d3.scaleLinear()\n        .domain([0, d3.max(rawData, d => +d.value)])\n        .range([height, 0])\n      svg.append('g')\n        .call(d3.axisLeft(y))\n\n      // Color scale\n      const color = d3.scaleOrdinal(d3.schemeCategory10)\n\n      // Draw the line for each group\n      data.forEach((crypto) => {\n        const line = d3.line()\n          .x(d => x(new Date(d.date)))\n          .y(d => y(+d.value))\n\n        svg.append('path')\n          .datum(crypto.values)\n          .attr('fill', 'none')\n          .attr('stroke', color(crypto.name))\n          .attr('stroke-width', 1.5)\n          .attr('d', line)\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.volatility-comparison {\n  width: 100%;\n  height: 400px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}