{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Bitcoin Correlation Heatmap\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"heatmap\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _hoisted_2, _createCommentVNode(\" Container for the D3.js treemap \")]);\n}","map":{"version":3,"names":["_createElementVNode","id","_createElementBlock","_hoisted_1","_hoisted_2","_createCommentVNode"],"sources":["/Users/stefanstapelberg/Desktop/FSD_PROJECT/CryptoCanvas/crypto-canvas/src/components/CorrelationMatrix.vue"],"sourcesContent":["<!-- eslint-disable no-multiple-empty-lines -->\n<template>\n  <div>\n      <h2>Bitcoin Correlation Heatmap</h2>\n      <div id=\"heatmap\"></div> <!-- Container for the D3.js treemap -->\n    </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport axios from 'axios'\nimport config from './config'\n\nexport default {\n  // eslint-disable-next-line vue/multi-word-component-names\n  name: 'Heatmap',\n  props: {\n    selectedTimeRange: {\n      type: String,\n      default: ''\n    },\n    selectedCoins: {\n      type: Array,\n      default: () => []\n    }\n  },\n  mounted () {\n    this.fetchCorrelationMatrix()\n  },\n  // CorrelationMatrix.vue\n  watch: {\n    selectedTimeRange () {\n      this.fetchCorrelationMatrix()\n    },\n    selectedCoins () {\n      this.fetchCorrelationMatrix()\n    }\n  },\n  methods: {\n    async fetchCorrelationMatrix () {\n      try {\n        const coinQueryParam = this.selectedCoins.join(',')\n        const response = await axios.get(`${config.backendApiUrl}/getCorrelationMatrix`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: coinQueryParam\n          }\n        })\n        this.drawHeatmap(response.data.matrix, response.data.labels)\n      } catch (error) {\n        console.error('Error fetching correlation matrix:', error)\n      }\n    },\n    drawHeatmap (matrix, labels) {\n      // Define the dimensions and margins for the heatmap\n      const margin = { top: 80, right: 80, bottom: 80, left: 80 }\n      const width = 1000 - margin.left - margin.right\n      const height = 400 - margin.top - margin.bottom\n\n      // Remove any existing SVG to avoid overlapping heatmaps\n      d3.select('#heatmap').select('svg').remove()\n\n      // Append the svg object to the body of the page\n      const svg = d3.select('#heatmap')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top - 80})`)\n\n      // Build X scales and axis\n      const x = d3.scaleBand()\n        .range([0, width])\n        .domain(labels)\n        .padding(0.05)\n      svg.append('g')\n        .style('font-size', 15)\n        .attr('transform', `translate(0,${height})`)\n        .call(d3.axisBottom(x).tickSize(0))\n        .select('.domain').remove()\n\n      // Build Y scales and axis\n      const y = d3.scaleBand()\n        .range([height, 0])\n        .domain(labels)\n        .padding(0.05)\n      svg.append('g')\n        .style('font-size', 15)\n        .call(d3.axisLeft(y).tickSize(0))\n        .select('.domain').remove()\n\n      // Build color scale\n      // eslint-disable-next-line indent\n    // Create a diverging color scale\n      const myColor = d3.scaleDiverging()\n        .interpolator(d3.interpolateRdYlBu) // This is a common diverging color interpolator\n        .domain([-1, 0, 1])\n\n      // After your heatmap squares have been added:\n      // Assume myColor is your color scale\n\n      // Define the legend\n      const legendWidth = 300\n      const legendHeight = 20\n      const legendMargin = { top: 10, right: 60, bottom: 10, left: 60 }\n\n      // Append a defs (for definition) element to your SVG\n      const defs = svg.append('defs')\n\n      // Append a linearGradient element to the defs and give it a unique id\n      const linearGradient = defs.append('linearGradient')\n        .attr('id', 'linear-gradient')\n\n      // Horizontal gradient\n      linearGradient\n        .attr('x1', '0%')\n        .attr('y1', '0%')\n        .attr('x2', '100%')\n        .attr('y2', '0%')\n\n      // Set the color for the start (0%)\n      linearGradient.append('stop')\n        .attr('offset', '0%')\n        .attr('stop-color', myColor(0)) // light color\n\n      // Set the color for the end (100%)\n      linearGradient.append('stop')\n        .attr('offset', '100%')\n        .attr('stop-color', myColor(1)) // dark color\n\n      // Draw the rectangle and fill with gradient\n      svg.append('rect')\n        .attr('width', legendWidth)\n        .attr('height', legendHeight)\n        .style('fill', 'url(#linear-gradient)')\n        .attr('transform', `translate(${margin.left}, ${height + margin.top + legendMargin.top})`)\n\n      // Append title\n      svg.append('text')\n        .attr('class', 'legend-title')\n        .attr('x', margin.left)\n        .attr('y', height + margin.top)\n        .style('text-anchor', 'left')\n        .text('Correlation Scale')\n\n      // Create a scale and axis for the legend\n      const legendScale = d3.scaleLinear()\n        .domain([-1, 1])\n        .range([0, legendWidth])\n\n      const legendAxis = d3.axisBottom(legendScale)\n        .ticks(5)\n        .tickFormat(d3.format('.1f'))\n\n      svg.append('g')\n        .attr('class', 'legend-axis')\n        .attr('transform', `translate(${margin.left}, ${height + margin.top + legendHeight + legendMargin.top})`)\n        .call(legendAxis)\n      svg.selectAll()\n        .data(matrix.flatMap((row, i) => row.map((value, j) => ({ row: labels[i], column: labels[j], value }))))\n        .enter()\n        .append('text')\n        .text(d => d.value.toFixed(2))\n        .attr('x', d => x(d.column) + x.bandwidth() / 2)\n        .attr('y', d => y(d.row) + y.bandwidth() / 2)\n        .style('text-anchor', 'middle')\n        .style('alignment-baseline', 'central')\n        .style('fill', d => myColor(d.value))\n\n      // create a tooltip\n      const tooltip = d3.select('#heatmap')\n        .append('div')\n        .style('opacity', 0)\n        .attr('class', 'tooltip')\n        .style('background-color', 'white')\n        .style('border', 'solid')\n        .style('border-width', '2px')\n        .style('border-radius', '5px')\n        .style('padding', '5px')\n        .style('position', 'absolute')\n\n      // Three functions that change the tooltip when user hovers, moves, or leaves a cell\n      const mouseover = function (event, d) {\n        tooltip\n          .html(`The correlation between ${d.row} and ${d.column} is ${d.value.toFixed(2)}.<br/>\n           A value close to 1 indicates a strong positive relationship, while a value close to -1 indicates a strong negative relationship.`)\n          .style('opacity', 1)\n        d3.select(this)\n          .style('stroke', 'black')\n          .style('opacity', 1)\n      }\n      const mousemove = function (event, d) {\n        tooltip.html('Correlation: ' + d.value.toFixed(2))\n          .style('left', (event.x) + 'px')\n          .style('top', (event.y) + 'px')\n      }\n      const mouseleave = function (event, d) {\n        tooltip.style('opacity', 0)\n        d3.select(this)\n          .style('stroke', 'none')\n          .style('opacity', 0.8)\n      }\n\n      // Add the squares\n      svg.selectAll()\n        .data(matrix.flatMap((row, i) => row.map((value, j) => ({ row: labels[i], column: labels[j], value }))))\n        .enter()\n        .append('rect')\n        .attr('x', d => x(d.column))\n        .attr('y', d => y(d.row))\n        .attr('rx', 4)\n        .attr('ry', 4)\n        .attr('width', x.bandwidth())\n        .attr('height', y.bandwidth())\n        .style('fill', d => myColor(d.value))\n        .style('stroke-width', 4)\n        .style('stroke', 'none')\n        .style('opacity', 0.8)\n        .on('mouseover', mouseover)\n        .on('mousemove', mousemove)\n        .on('mouseleave', mouseleave)\n    }\n  }\n}\n\n</script>\n\n<style>\n.tooltip {\n  position: absolute;\n  text-align: center;\n  transition: opacity 0.3s;\n}\n</style>\n"],"mappings":";gCAGMA,mBAAA,CAAoC,YAAhC,6BAA2B;gCAC/BA,mBAAA,CAAwB;EAAnBC,EAAE,EAAC;AAAS;;;uBAFrBC,mBAAA,CAGQ,cAFJC,UAAoC,EACpCC,UAAwB,EAACC,mBAAA,qCAAwC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}