{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Market Capitalization Treemap\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"market-cap-treemap\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _hoisted_2, _createCommentVNode(\" Container for the D3.js treemap \")]);\n}","map":{"version":3,"names":["_createElementVNode","id","_createElementBlock","_hoisted_1","_hoisted_2","_createCommentVNode"],"sources":["/Users/stefanstapelberg/Desktop/FSD_PROJECT/CryptoCanvas/crypto-canvas/src/components/MarketCapTreeMap.vue"],"sourcesContent":["<template>\n    <div>\n      <h2>Market Capitalization Treemap</h2>\n      <div id=\"market-cap-treemap\"></div> <!-- Container for the D3.js treemap -->\n    </div>\n  </template>\n\n<script>\nimport axios from 'axios'\nimport config from './config'\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'MarketCapTreeMap',\n  data () {\n    return {\n      marketCapData: []\n    }\n  },\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  mounted () {\n    this.fetchMarketCapData()\n  },\n  watch: {\n    selectedTimeRange () {\n      this.fetchMarketCapData()\n    },\n    selectedCoins () {\n      this.fetchMarketCapData()\n    }\n  },\n  methods: {\n    async fetchMarketCapData () {\n      try {\n        const response = await axios.get(`${config.backendApiUrl}/getMarketCapData`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        })\n        this.marketCapData = response.data\n        this.drawTreemap()\n      } catch (error) {\n        console.error('Error fetching market cap data:', error)\n      }\n    },\n    drawTreemap () {\n      const data = this.marketCapData\n      console.log('Drawing Treemap with Data:', this.marketCapData);\n\n      // Define dimensions and margins for the treemap\n      const margin = { top: 10, right: 10, bottom: 10, left: 10 }\n      const width = 960 - margin.left - margin.right\n      const height = 500 - margin.top - margin.bottom\n\n      // Remove any existing SVG to avoid overlaps\n      d3.select('#market-cap-treemap').select('svg').remove()\n\n      // Create an SVG container\n      const svg = d3.select('#market-cap-treemap')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      // Create a hierarchy from the data and compute the treemap layout\n      const root = d3.hierarchy({ children: data })\n        .sum(d => d.marketCap) // Use marketCap for the area size\n        .sort((a, b) => b.height - a.height || b.value - a.value)\n\n      d3.treemap()\n        .size([width, height])\n        .padding(1)(root)\n\n      // Define the color scale\n      const color = d3.scaleOrdinal(d3.schemeCategory10)\n\n      // Draw rectangles for each node\n      const nodes = svg.selectAll('g')\n        .data(root.leaves())\n        .enter()\n        .append('g')\n        .attr('transform', d => `translate(${d.x0},${d.y0})`)\n\n      nodes.append('rect')\n        .attr('width', d => d.x1 - d.x0)\n        .attr('height', d => d.y1 - d.y0)\n        .style('fill', d => color(d.data.name))\n\n      // Add titles to the rectangles\n      nodes.append('text')\n        .attr('x', 5)\n        .attr('y', 20)\n        .text(d => d.data.name)\n        .attr('font-size', '15px')\n        .attr('fill', 'white')\n    }\n  }\n}\n</script>\n\n  <style>\n  /* Add styling for your treemap here */\n  #market-cap-treemap svg {\n    font-family: 'Arial', sans-serif;\n  }\n  </style>\n"],"mappings":";gCAEMA,mBAAA,CAAsC,YAAlC,+BAA6B;gCACjCA,mBAAA,CAAmC;EAA9BC,EAAE,EAAC;AAAoB;;;uBAF9BC,mBAAA,CAGM,cAFJC,UAAsC,EACtCC,UAAmC,EAACC,mBAAA,qCAAwC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}