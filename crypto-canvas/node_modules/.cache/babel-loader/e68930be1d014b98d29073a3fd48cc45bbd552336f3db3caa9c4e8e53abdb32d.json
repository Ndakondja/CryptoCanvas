{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Market Capitalization Treemap\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"market-cap-treemap\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _hoisted_2, _createCommentVNode(\" Container for the D3.js treemap \")]);\n}","map":{"version":3,"names":["_createElementVNode","id","_createElementBlock","_hoisted_1","_hoisted_2","_createCommentVNode"],"sources":["/Users/stefanstapelberg/Desktop/FSD_PROJECT/CryptoCanvas/crypto-canvas/src/components/MarketCapTreeMap.vue"],"sourcesContent":["<template>\n    <div>\n      <h2>Market Capitalization Treemap</h2>\n      <div id=\"market-cap-treemap\"></div> <!-- Container for the D3.js treemap -->\n    </div>\n  </template>\n\n<script>\nimport axios from 'axios'\nimport config from './config'\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'MarketCapTreeMap',\n  data () {\n    return {\n      marketCapData: []\n    }\n  },\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  mounted () {\n    this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins)\n  },\n  watch: {\n    selectedTimeRange () {\n      this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins)\n    },\n    selectedCoins () {\n      this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins)\n    }\n  },\n  methods: {\n    async fetchMarketCapData () {\n      try {\n        const response = await axios.get(`${config.backendApiUrl}/getMarketCapData`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        })\n        this.marketCapData = response.data\n        this.drawBarChart(this.selectedTimeRange, this.selectedCoins)\n      } catch (error) {\n        console.error('Error fetching market cap data:', error)\n      }\n    },\n    drawBarChart () {\n      const data = this.marketCapData.sort((a, b) => d3.descending(a.marketCap, b.marketCap))\n      const container = d3.select('#market-cap-treemap')\n      console.log('Drawing Bar Chart with Data:', data)\n\n      // Define dimensions and margins\n      const width = 800\n      const height = 400\n      const margin = { top: 20, right: 20, bottom: 30, left: 40 }\n      container.select('svg').remove()\n\n      // Create SVG container\n      const svg = container\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      // Create x and y scales\n      const x = d3.scaleBand()\n        .range([0, width])\n        .domain(data.map(d => d.coin))\n        .padding(0.1)\n\n      const y = d3.scaleLinear()\n        .range([height, 0])\n        .domain([0, 1]) // Start domain at 1 to avoid log(0)\n        .nice()\n\n      // Draw bars\n      svg.selectAll('.bar')\n        .data(data)\n        .enter().append('rect')\n        .attr('class', 'bar')\n        .attr('x', d => x(d.coin))\n        .attr('width', x.bandwidth())\n        .attr('y', d => y(d.marketCap))\n        .attr('height', d => height - 100 * y(d.marketCap))\n        .style('fill', 'steelblue')\n\n      // Add the x Axis\n      svg.append('g')\n        .attr('transform', `translate(0,${height})`)\n        .call(d3.axisBottom(x))\n\n      // Add the y Axis\n      svg.append('g')\n        .call(d3.axisLeft(y))\n    }\n  }\n}\n</script>\n\n  <style>\n  /* Add styling for your treemap here */\n  #market-cap-treemap svg {\n    font-family: 'Arial', sans-serif;\n  }\n  </style>\n"],"mappings":";gCAEMA,mBAAA,CAAsC,YAAlC,+BAA6B;gCACjCA,mBAAA,CAAmC;EAA9BC,EAAE,EAAC;AAAoB;;;uBAF9BC,mBAAA,CAGM,cAFJC,UAAsC,EACtCC,UAAmC,EAACC,mBAAA,qCAAwC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}