{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Volatility Chart\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"volatility-chart\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_3 = {\n  class: \"faq-section\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Frequently Asked Questions\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"faq-list\"\n};\nconst _hoisted_6 = {\n  class: \"faq-question\"\n};\nconst _hoisted_7 = {\n  class: \"faq-answer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createCommentVNode(\" Heading for the chart \"), _hoisted_2, _createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"ul\", _hoisted_5, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.faqs, (faq, index) => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: index,\n      class: \"faq-item\"\n    }, [_createElementVNode(\"h3\", _hoisted_6, _toDisplayString(faq.question), 1 /* TEXT */), _createElementVNode(\"p\", _hoisted_7, _toDisplayString(faq.answer), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementVNode","id","class","_hoisted_1","_createCommentVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_createElementBlock","_Fragment","_renderList","$data","faqs","faq","index","key","_hoisted_6","_toDisplayString","question","_hoisted_7","answer"],"sources":["C:\\Projects\\CryptoCanvas\\crypto-canvas\\src\\components\\VolatilityComparison.vue"],"sourcesContent":["<template>\r\n      <h2>Volatility Chart</h2> <!-- Heading for the chart -->\r\n   <div id=\"volatility-chart\"></div>\r\n  <div class=\"faq-section\">\r\n      <h2>Frequently Asked Questions</h2>\r\n      <ul class=\"faq-list\">\r\n        <li v-for=\"(faq, index) in faqs\" :key=\"index\" class=\"faq-item\">\r\n          <h3 class=\"faq-question\">{{ faq.question }}</h3>\r\n          <p class=\"faq-answer\">{{ faq.answer }}</p>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3'\r\nimport axios from 'axios'\r\nimport config from './config'\r\n\r\nexport default {\r\n  // eslint-disable-next-line vue/multi-word-component-names\r\n  name: 'Volatility',\r\n  mounted () {\r\n    this.fetchVolatilityData()\r\n  },\r\n  props: {\r\n    selectedTimeRange: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    selectedCoins: {\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n  watch: {\r\n    selectedTimeRange () {\r\n      this.fetchVolatilityData()\r\n    },\r\n    selectedCoins () {\r\n      this.fetchVolatilityData()\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n    // ... other data properties\r\n      faqs: [\r\n        {\r\n          question: \"What does 'volatility' mean in cryptocurrency?\",\r\n          answer: 'Volatility refers to the price fluctuations of a cryptocurrency over a specific period. High volatility means the price can change dramatically over a short time, while low volatility indicates that the price is relatively stable.'\r\n        },\r\n        {\r\n          question: \"How is 'correlation' related to cryptocurrencies?\",\r\n          answer: 'Correlation in cryptocurrencies measures how closely the prices of two different cryptocurrencies move together. A positive correlation means they tend to move in the same direction, while a negative correlation means they move in opposite directions.'\r\n        }\r\n      // ... additional FAQs\r\n      ]\r\n    // ... other data properties\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchVolatilityData () {\r\n      try {\r\n        const response = await axios.get(config.backendApiUrl + '/getCoinVolatilityComparisons', {\r\n          params: {\r\n            timeRange: this.selectedTimeRange,\r\n            coins: this.selectedCoins.join(',')\r\n          }\r\n        })\r\n        this.drawVolatilityChart(response.data)\r\n      } catch (error) {\r\n        console.error('Error fetching volatility data:', error)\r\n      }\r\n    },\r\n    drawVolatilityChart (rawData) {\r\n      // Parse data and group by coin\r\n      const parseTime = d3.timeParse('%a, %d %b %Y %H:%M:%S GMT')\r\n      const data = rawData.map(d => ({\r\n        coin: d.Coin,\r\n        date: parseTime(d.Date),\r\n        value: +d.Volatility\r\n      }))\r\n\r\n      // Define dimensions and margins\r\n      const margin = { top: 10, right: 80, bottom: 30, left: 50 }\r\n      const width = 960 - margin.left - margin.right\r\n      const height = 500 - margin.top - margin.bottom\r\n\r\n      // Remove any existing SVG to avoid overlapping charts\r\n      d3.select('#volatility-chart').select('svg').remove()\r\n\r\n      // Append the svg object\r\n      const svg = d3.select('#volatility-chart')\r\n        .append('svg')\r\n        .attr('width', width + margin.left + margin.right)\r\n        .attr('height', height + margin.top + margin.bottom)\r\n        .append('g')\r\n        .attr('transform', `translate(${margin.left},${margin.top})`)\r\n\r\n      // Add X & Y scales and axes\r\n      const x = d3.scaleTime().range([0, width])\r\n      const y = d3.scaleLinear().range([height, 0])\r\n      x.domain(d3.extent(data, d => d.date))\r\n      y.domain([0, d3.max(data, d => d.value)])\r\n\r\n      // Define the line generator\r\n      const valueline = d3.line()\r\n        .x(d => x(d.date))\r\n        .y(d => y(d.value))\r\n\r\n      // Create a color scale\r\n      const color = d3.scaleOrdinal(d3.schemeCategory10)\r\n\r\n      // Add the valueline path for each coin\r\n      this.selectedCoins.forEach(coin => {\r\n        svg.append('path')\r\n          .datum(data.filter(d => d.coin === coin))\r\n          .attr('class', 'line')\r\n          .attr('d', valueline)\r\n          .style('stroke', color(coin))\r\n          .style('fill', 'none')\r\n      })\r\n\r\n      // Add the X Axis\r\n      svg.append('g')\r\n        .attr('transform', `translate(0,${height})`)\r\n        .call(d3.axisBottom(x))\r\n\r\n      // Add the Y Axis\r\n      svg.append('g')\r\n        .call(d3.axisLeft(y).tickFormat(d3.format('.0%'))) // Format the ticks to show percentage\r\n        // ...after your axes have been appended to the SVG\r\n\r\n      // Add X axis label:\r\n      svg.append('text')\r\n        .attr('text-anchor', 'end')\r\n        .attr('x', width / 2 + margin.left)\r\n        .attr('y', height + margin.top + 20)\r\n        .text('Months')\r\n\r\n      // Add Y axis label:\r\n      svg.append('text')\r\n        .attr('text-anchor', 'end')\r\n        .attr('transform', 'rotate(-90)')\r\n        .attr('y', -margin.left + 20)\r\n        .attr('x', -margin.top - height / 2 + 20)\r\n        .text('Volatility')\r\n\r\n      // Tooltip logic (assuming you have CSS styles defined for .tooltip)\r\n      const tooltip = d3.select('#volatility-chart').append('div')\r\n        .attr('class', 'tooltip')\r\n        .style('opacity', 0)\r\n\r\n      const mouseover = function (event, d) {\r\n        tooltip.transition()\r\n          .duration(200) // Time in milliseconds for the tooltip to become fully opaque\r\n          .style('opacity', 0.9) // Fully opaque\r\n      }\r\n\r\n      const mousemove = function (event, d) {\r\n        tooltip.html('Volatility: ' + (d.value * 100).toFixed(2) + '%<br/>Date: ' + d3.timeFormat('%B %d, %Y')(d.date)).style('left', (event.pageX + 10) + 'px') // 10px to the right of the cursor\r\n          .style('top', (event.pageY - 10) + 'px') // 10px above the cursor\r\n      }\r\n\r\n      const mouseleave = function (event, d) {\r\n        tooltip.transition()\r\n          .duration(500) // Time in milliseconds for the tooltip to become fully transparent\r\n          .style('opacity', 0) // Fully transparent\r\n      }\r\n      const legend = svg.append('g')\r\n        .attr('font-family', 'sans-serif')\r\n        .attr('font-size', 10)\r\n        .attr('text-anchor', 'end')\r\n        .selectAll('g')\r\n        .data(this.selectedCoins.slice().reverse()) // Assuming this.selected_coins contains the list of coins\r\n        .enter().append('g')\r\n        .attr('transform', function (d, i) { return 'translate(0,' + i * 20 + ')' })\r\n\r\n      // Add rectangles to the legend group\r\n      legend.append('rect')\r\n        .attr('x', width - 19)\r\n        .attr('width', 19)\r\n        .attr('height', 19)\r\n        .attr('fill', color) // Assuming color is your d3.scaleOrdinal() for colors\r\n\r\n      // Add text labels to the legend group\r\n      legend.append('text')\r\n        .attr('x', width - 24)\r\n        .attr('y', 9.5)\r\n        .attr('dy', '0.32em')\r\n        .text(function (d) { return d })\r\n\r\n      // Add the scatterplot points\r\n      svg.selectAll('dot')\r\n        .data(data)\r\n        .enter().append('circle')\r\n        .attr('r', 2)\r\n        .attr('cx', function (d) { return x(d.date) })\r\n        .attr('cy', function (d) { return y(d.value) })\r\n        .attr('fill', function (d) { return color(d.coin) })\r\n        .on('mouseover', mouseover)\r\n        .on('mouseout', mouseleave)\r\n        .on('mousemove', mousemove)\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.tooltip {\r\n  position: absolute;\r\n  text-align: center;\r\n  padding: 8px;\r\n  font: 12px sans-serif;\r\n  background: rgba(255, 255, 255, 0.8); /* Semi-transparent white background */\r\n  border: 1px solid #333; /* Solid border for contrast */\r\n  border-radius: 5px;\r\n  pointer-events: none; /* Prevents the tooltip from capturing mouse events */\r\n  z-index: 10; /* Ensures the tooltip is above other elements */\r\n}\r\n.faq-section {\r\n  margin-top: 2rem;\r\n  padding: 1rem;\r\n  background-color: #f9f9f9;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.faq-list {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.faq-item {\r\n  margin-bottom: 1.5rem;\r\n  padding-bottom: 1.5rem;\r\n  border-bottom: 2px solid #eaeaea;\r\n}\r\n\r\n.faq-question {\r\n  margin: 0 0 0.5rem 0;\r\n  font-weight: 600;\r\n  font-size: 1.2rem;\r\n  color: #2c3e50;\r\n}\r\n\r\n.faq-answer {\r\n  margin: 0;\r\n  font-size: 1rem;\r\n  color: #34495e;\r\n  line-height: 1.6;\r\n}\r\n\r\n/* Enhancements for the FAQ section to make it stand out */\r\n.faq-section h2 {\r\n  text-align: left;\r\n  border-bottom: 3px solid #3498db;\r\n  padding-bottom: 0.5rem;\r\n  margin-bottom: 2rem;\r\n  color: #2c3e50;\r\n}\r\n\r\n/* Additional interactive styles */\r\n.faq-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.faq-item:hover {\r\n  background-color: #f0f0f0;\r\n}\r\n\r\n</style>\r\n"],"mappings":";gCACMA,mBAAA,CAAyB,YAArB,kBAAgB;gCACvBA,mBAAA,CAAiC;EAA5BC,EAAE,EAAC;AAAkB;;EACtBC,KAAK,EAAC;AAAa;gCACpBF,mBAAA,CAAmC,YAA/B,4BAA0B;;EAC1BE,KAAK,EAAC;AAAU;;EAEZA,KAAK,EAAC;AAAc;;EACrBA,KAAK,EAAC;AAAY;;6DAPzBC,UAAyB,EAACC,mBAAA,2BAA8B,EAC3DC,UAAiC,EAClCL,mBAAA,CAQQ,OARRM,UAQQ,GAPJC,UAAmC,EACnCP,mBAAA,CAKK,MALLQ,UAKK,I,kBAJHC,mBAAA,CAGKC,SAAA,QAAAC,WAAA,CAHsBC,KAAA,CAAAC,IAAI,GAAnBC,GAAG,EAAEC,KAAK;yBAAtBN,mBAAA,CAGK;MAH6BO,GAAG,EAAED,KAAK;MAAEb,KAAK,EAAC;QAClDF,mBAAA,CAAgD,MAAhDiB,UAAgD,EAAAC,gBAAA,CAApBJ,GAAG,CAACK,QAAQ,kBACxCnB,mBAAA,CAA0C,KAA1CoB,UAA0C,EAAAF,gBAAA,CAAjBJ,GAAG,CAACO,MAAM,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}