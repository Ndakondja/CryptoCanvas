{"ast":null,"code":"import axios from 'axios';\nimport config from './config';\nimport * as d3 from 'd3';\nexport default {\n  name: 'MarketCapTreeMap',\n  data() {\n    return {\n      marketCapData: [],\n      colorScale: d3.scaleOrdinal(d3.schemeSet2)\n    };\n  },\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  mounted() {\n    this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins);\n  },\n  watch: {\n    selectedTimeRange() {\n      this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins);\n    },\n    selectedCoins() {\n      this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins);\n    }\n  },\n  methods: {\n    async fetchMarketCapData() {\n      try {\n        const response = await axios.get(`${config.backendApiUrl}/getMarketCapData`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        });\n        this.marketCapData = response.data;\n        this.drawBarChart(this.selectedTimeRange, this.selectedCoins);\n      } catch (error) {\n        console.error('Error fetching market cap data:', error);\n      }\n    },\n    drawBarChart() {\n      const data = this.marketCapData.sort((a, b) => d3.descending(a.marketCap, b.marketCap));\n      const container = d3.select('#market-cap-treemap');\n      console.log('Drawing Bar Chart with Data:', data);\n\n      // Define dimensions and margins\n      const width = 800;\n      const height = 400;\n      const margin = {\n        top: 20,\n        right: 20,\n        bottom: 30,\n        left: 40\n      };\n      container.select('svg').remove();\n\n      // Create SVG container\n      const svg = container.append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n      // Create x and y scales\n      const x = d3.scaleBand().range([0, width]).domain(data.map(d => d.coin)).padding(0.1);\n      const y = d3.scaleLinear().range([height, 0]).domain([0, 1]); // Start domain at 1 to avoid log(0)\n\n      // Draw bars\n      // In drawBarChart method\n      svg.selectAll('.bar').data(data).enter().append('rect').attr('class', 'bar').attr('x', d => x(d.coin)).attr('width', x.bandwidth()).attr('y', d => y(d.marketCap)).attr('height', d => height - y(d.marketCap)).style('fill', d => this.colorScale(d.coin)); // Use the color scale here\n\n      // Add the x Axis\n      svg.append('g').attr('transform', `translate(0,${height})`).call(d3.axisBottom(x));\n\n      // Add the y Axis\n      svg.append('g').call(d3.axisLeft(y));\n    }\n  }\n};","map":{"version":3,"names":["axios","config","d3","name","data","marketCapData","colorScale","scaleOrdinal","schemeSet2","props","selectedTimeRange","String","selectedCoins","Array","mounted","fetchMarketCapData","watch","methods","response","get","backendApiUrl","params","timeRange","coins","join","drawBarChart","error","console","sort","a","b","descending","marketCap","container","select","log","width","height","margin","top","right","bottom","left","remove","svg","append","attr","x","scaleBand","range","domain","map","d","coin","padding","y","scaleLinear","selectAll","enter","bandwidth","style","call","axisBottom","axisLeft"],"sources":["/Users/stefanstapelberg/Desktop/FSD_PROJECT/CryptoCanvas/crypto-canvas/src/components/MarketCapTreeMap.vue"],"sourcesContent":["<template>\n    <div>\n      <h2>Market Capitalization Treemap</h2>\n      <div id=\"market-cap-treemap\"></div> <!-- Container for the D3.js treemap -->\n    </div>\n  </template>\n\n<script>\nimport axios from 'axios'\nimport config from './config'\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'MarketCapTreeMap',\n  data () {\n    return {\n      marketCapData: [],\n      colorScale: d3.scaleOrdinal(d3.schemeSet2)\n    }\n  },\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  mounted () {\n    this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins)\n  },\n  watch: {\n    selectedTimeRange () {\n      this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins)\n    },\n    selectedCoins () {\n      this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins)\n    }\n  },\n  methods: {\n    async fetchMarketCapData () {\n      try {\n        const response = await axios.get(`${config.backendApiUrl}/getMarketCapData`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        })\n        this.marketCapData = response.data\n        this.drawBarChart(this.selectedTimeRange, this.selectedCoins)\n      } catch (error) {\n        console.error('Error fetching market cap data:', error)\n      }\n    },\n    drawBarChart () {\n      const data = this.marketCapData.sort((a, b) => d3.descending(a.marketCap, b.marketCap))\n      const container = d3.select('#market-cap-treemap')\n      console.log('Drawing Bar Chart with Data:', data)\n\n      // Define dimensions and margins\n      const width = 800\n      const height = 400\n      const margin = { top: 20, right: 20, bottom: 30, left: 40 }\n      container.select('svg').remove()\n\n      // Create SVG container\n      const svg = container\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      // Create x and y scales\n      const x = d3.scaleBand()\n        .range([0, width])\n        .domain(data.map(d => d.coin))\n        .padding(0.1)\n\n      const y = d3.scaleLinear()\n        .range([height, 0])\n        .domain([0, 1]) // Start domain at 1 to avoid log(0)\n\n      // Draw bars\n      // In drawBarChart method\n      svg.selectAll('.bar')\n        .data(data)\n        .enter().append('rect')\n        .attr('class', 'bar')\n        .attr('x', d => x(d.coin))\n        .attr('width', x.bandwidth())\n        .attr('y', d => y(d.marketCap))\n        .attr('height', d => height - y(d.marketCap))\n        .style('fill', d => this.colorScale(d.coin)) // Use the color scale here\n\n      // Add the x Axis\n      svg.append('g')\n        .attr('transform', `translate(0,${height})`)\n        .call(d3.axisBottom(x))\n\n      // Add the y Axis\n      svg.append('g')\n        .call(d3.axisLeft(y))\n    }\n  }\n}\n</script>\n\n  <style>\n  /* Add styling for your treemap here */\n  #market-cap-treemap svg {\n    font-family: 'Arial', sans-serif;\n  }\n  </style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}