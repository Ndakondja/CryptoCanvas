{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Average of Market Share (%) for Period\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"market-cap-treemap\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _hoisted_2, _createCommentVNode(\" Container for the D3.js treemap \")]);\n}","map":{"version":3,"names":["_createElementVNode","id","_createElementBlock","_hoisted_1","_hoisted_2","_createCommentVNode"],"sources":["C:\\Projects\\CryptoCanvas\\crypto-canvas\\src\\components\\MarketCapTreeMap.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Average of Market Share (%) for Period</h2>\r\n      <div id=\"market-cap-treemap\"></div> <!-- Container for the D3.js treemap -->\r\n    </div>\r\n  </template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport config from './config'\r\nimport * as d3 from 'd3'\r\n\r\nexport default {\r\n  name: 'MarketCapTreeMap',\r\n  data () {\r\n    return {\r\n      marketCapData: [],\r\n      colorScale: d3.scaleOrdinal(d3.schemeSet2)\r\n    }\r\n  },\r\n  props: {\r\n    selectedTimeRange: String,\r\n    selectedCoins: Array\r\n  },\r\n  mounted () {\r\n    this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins)\r\n  },\r\n  watch: {\r\n    selectedTimeRange () {\r\n      this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins)\r\n    },\r\n    selectedCoins () {\r\n      this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins)\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchMarketCapData () {\r\n      try {\r\n        const response = await axios.get(`${config.backendApiUrl}/getMarketCapData`, {\r\n          params: {\r\n            timeRange: this.selectedTimeRange,\r\n            coins: this.selectedCoins.join(',')\r\n          }\r\n        })\r\n        this.marketCapData = response.data\r\n        this.drawBarChart(this.selectedTimeRange, this.selectedCoins)\r\n      } catch (error) {\r\n        console.error('Error fetching market cap data:', error)\r\n      }\r\n    },\r\n    drawBarChart () {\r\n      const data = this.marketCapData.sort((a, b) => d3.descending(a.marketCap, b.marketCap))\r\n      const container = d3.select('#market-cap-treemap')\r\n      console.log('Drawing Bar Chart with Data:', data)\r\n\r\n      // Define dimensions and margins\r\n      const margin = { top: 5, right: 30, bottom: 30, left: 60 }\r\n      const width = 700 - margin.left - margin.right\r\n      const height = 280 - margin.top - margin.bottom\r\n      container.select('svg').remove()\r\n\r\n      // Create SVG container\r\n      const svg = container\r\n        .append('svg')\r\n        .attr('width', width + margin.left + margin.right)\r\n        .attr('height', height + margin.top + margin.bottom)\r\n        .append('g')\r\n        .attr('transform', `translate(${margin.left},${margin.top})`)\r\n\r\n      // Create x and y scales\r\n      const x = d3.scaleBand()\r\n        .range([0, width])\r\n        .domain(data.map(d => d.coin))\r\n        .padding(0.1)\r\n\r\n      const y = d3.scaleLinear()\r\n        .range([height, 0])\r\n        .domain([0, 1]) // Start domain at 1 to avoid log(0)\r\n\r\n      // Draw bars\r\n      svg.selectAll('.bar')\r\n        .data(data)\r\n        .enter().append('rect')\r\n        .attr('class', 'bar')\r\n        .attr('x', d => x(d.coin))\r\n        .attr('width', x.bandwidth())\r\n        .attr('y', d => y(d.avgMarketCap))\r\n        .attr('height', d => height - y(d.avgMarketCap))\r\n        .style('fill', d => this.colorScale(d.coin)) // Use the color scale here\r\n\r\n      // Add the x Axis\r\n      svg.append('g')\r\n        .attr('transform', `translate(0,${height})`)\r\n        .call(d3.axisBottom(x))\r\n\r\n      // Add the y Axis\r\n      svg.append('g')\r\n        .call(d3.axisLeft(y))\r\n\r\n      svg.append('text')\r\n        .attr('transform', 'rotate(-90)')\r\n        .attr('y', 0 - margin.left + 17)\r\n        .attr('x', 0 - (height / 2))\r\n        .attr('dy', '1em')\r\n        .style('text-anchor', 'middle')\r\n        .style('font-size', '10px') // Smaller font size\r\n        .text('% Market Share')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n  <style>\r\n  /* Add styling for your treemap here */\r\n  #market-cap-treemap svg {\r\n    font-family: 'Arial', sans-serif;\r\n  }\r\n  </style>\r\n"],"mappings":";gCAEMA,mBAAA,CAA+C,YAA3C,wCAAsC;gCAC1CA,mBAAA,CAAmC;EAA9BC,EAAE,EAAC;AAAoB;;;uBAF9BC,mBAAA,CAGM,cAFJC,UAA+C,EAC/CC,UAAmC,EAACC,mBAAA,qCAAwC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}