{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"volatility-chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["C:\\Projects\\CryptoCanvas\\crypto-canvas\\src\\components\\VolatilityComparison.vue"],"sourcesContent":["<template>\r\n  <div id=\"volatility-chart\"></div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3'\r\nimport axios from 'axios'\r\nimport config from './config'\r\n\r\nexport default {\r\n  // eslint-disable-next-line vue/multi-word-component-names\r\n  name: 'Volatility',\r\n  mounted () {\r\n    this.fetchVolatilityData()\r\n  },\r\n  props: {\r\n    selectedTimeRange: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    selectedCoins: {\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n  watch: {\r\n    selectedTimeRange () {\r\n      this.fetchCorrelationMatrix()\r\n    },\r\n    selectedCoins () {\r\n      this.fetchCorrelationMatrix()\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchVolatilityData () {\r\n      try {\r\n        const response = await axios.get(config.backendApiUrl + '/getCoinVolatilityComparisons', {\r\n          params: {\r\n            timeRange: this.selectedTimeRange,\r\n            coins: this.selectedCoins.join(',')\r\n          }\r\n        })\r\n        this.drawVolatilityChart(response.data)\r\n      } catch (error) {\r\n        console.error('Error fetching volatility data:', error)\r\n      }\r\n    },\r\n    drawVolatilityChart (rawData) {\r\n      // Parse data and group by coin\r\n      const parseTime = d3.timeParse('%a, %d %b %Y %H:%M:%S GMT')\r\n      const data = rawData.map(d => ({\r\n        coin: d.Coin,\r\n        date: parseTime(d.Date),\r\n        value: +d.Volatility\r\n      }))\r\n\r\n      // Define dimensions and margins\r\n      const margin = { top: 10, right: 80, bottom: 30, left: 50 }\r\n      const width = 960 - margin.left - margin.right\r\n      const height = 500 - margin.top - margin.bottom\r\n\r\n      // Remove any existing SVG to avoid overlapping charts\r\n      d3.select('#volatility-chart').select('svg').remove()\r\n\r\n      // Append the svg object\r\n      const svg = d3.select('#volatility-chart')\r\n        .append('svg')\r\n        .attr('width', width + margin.left + margin.right)\r\n        .attr('height', height + margin.top + margin.bottom)\r\n        .append('g')\r\n        .attr('transform', `translate(${margin.left},${margin.top})`)\r\n\r\n      // Add X & Y scales and axes\r\n      const x = d3.scaleTime().range([0, width])\r\n      const y = d3.scaleLinear().range([height, 0])\r\n      x.domain(d3.extent(data, d => d.date))\r\n      y.domain([0, d3.max(data, d => d.value)])\r\n\r\n      // Define the line generator\r\n      const valueline = d3.line()\r\n        .x(d => x(d.date))\r\n        .y(d => y(d.value))\r\n\r\n      // Create a color scale\r\n      const color = d3.scaleOrdinal(d3.schemeCategory10)\r\n\r\n      // Add the valueline path for each coin\r\n      this.selected_coins.forEach(coin => {\r\n        svg.append('path')\r\n          .datum(data.filter(d => d.coin === coin))\r\n          .attr('class', 'line')\r\n          .attr('d', valueline)\r\n          .style('stroke', color(coin))\r\n          .style('fill', 'none')\r\n      })\r\n\r\n      // Add the X Axis\r\n      svg.append('g')\r\n        .attr('transform', `translate(0,${height})`)\r\n        .call(d3.axisBottom(x))\r\n\r\n      // Add the Y Axis\r\n      svg.append('g')\r\n        .call(d3.axisLeft(y))\r\n        // ...after your axes have been appended to the SVG\r\n\r\n      // Add X axis label:\r\n      svg.append('text')\r\n        .attr('text-anchor', 'end')\r\n        .attr('x', width / 2 + margin.left)\r\n        .attr('y', height + margin.top + 20)\r\n        .text('Months')\r\n\r\n      // Add Y axis label:\r\n      svg.append('text')\r\n        .attr('text-anchor', 'end')\r\n        .attr('transform', 'rotate(-90)')\r\n        .attr('y', -margin.left + 20)\r\n        .attr('x', -margin.top - height / 2 + 20)\r\n        .text('Volatility')\r\n\r\n      // Tooltip logic (assuming you have CSS styles defined for .tooltip)\r\n      const tooltip = d3.select('#volatility-chart').append('div')\r\n        .attr('class', 'tooltip')\r\n        .style('opacity', 0)\r\n\r\n      const mouseover = function (event, d) {\r\n        tooltip.transition()\r\n          .duration(200) // Time in milliseconds for the tooltip to become fully opaque\r\n          .style('opacity', 0.9) // Fully opaque\r\n      }\r\n\r\n      const mousemove = function (event, d) {\r\n        tooltip.html('Volatility: ' + d.value + '<br/>Date: ' + d3.timeFormat('%B %d, %Y')(d.date))\r\n          .style('left', (event.pageX + 10) + 'px') // 10px to the right of the cursor\r\n          .style('top', (event.pageY - 10) + 'px') // 10px above the cursor\r\n      }\r\n\r\n      const mouseleave = function (event, d) {\r\n        tooltip.transition()\r\n          .duration(500) // Time in milliseconds for the tooltip to become fully transparent\r\n          .style('opacity', 0) // Fully transparent\r\n      }\r\n      const legend = svg.append('g')\r\n        .attr('font-family', 'sans-serif')\r\n        .attr('font-size', 10)\r\n        .attr('text-anchor', 'end')\r\n        .selectAll('g')\r\n        .data(this.selected_coins.slice().reverse()) // Assuming this.selected_coins contains the list of coins\r\n        .enter().append('g')\r\n        .attr('transform', function (d, i) { return 'translate(0,' + i * 20 + ')' })\r\n\r\n      // Add rectangles to the legend group\r\n      legend.append('rect')\r\n        .attr('x', width - 19)\r\n        .attr('width', 19)\r\n        .attr('height', 19)\r\n        .attr('fill', color) // Assuming color is your d3.scaleOrdinal() for colors\r\n\r\n      // Add text labels to the legend group\r\n      legend.append('text')\r\n        .attr('x', width - 24)\r\n        .attr('y', 9.5)\r\n        .attr('dy', '0.32em')\r\n        .text(function (d) { return d })\r\n\r\n      // Add the scatterplot points\r\n      svg.selectAll('dot')\r\n        .data(data)\r\n        .enter().append('circle')\r\n        .attr('r', 2)\r\n        .attr('cx', function (d) { return x(d.date) })\r\n        .attr('cy', function (d) { return y(d.value) })\r\n        .attr('fill', function (d) { return color(d.coin) })\r\n        .on('mouseover', mouseover)\r\n        .on('mouseout', mouseleave)\r\n        .on('mousemove', mousemove)\r\n    }\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.tooltip {\r\n  position: absolute;\r\n  text-align: center;\r\n  padding: 8px;\r\n  font: 12px sans-serif;\r\n  background: rgba(255, 255, 255, 0.8); /* Semi-transparent white background */\r\n  border: 1px solid #333; /* Solid border for contrast */\r\n  border-radius: 5px;\r\n  pointer-events: none; /* Prevents the tooltip from capturing mouse events */\r\n  z-index: 10; /* Ensures the tooltip is above other elements */\r\n}\r\n\r\n</style>\r\n"],"mappings":";;EACOA,EAAE,EAAC;AAAkB;;uBAA1BC,mBAAA,CAAiC,OAAjCC,UAAiC"},"metadata":{},"sourceType":"module","externalDependencies":[]}