{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"price-chart\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createCommentVNode(\" Container for the D3.js chart \")]);\n}","map":{"version":3,"names":["_createElementVNode","id","_createElementBlock","_hoisted_1","_createCommentVNode"],"sources":["/Users/stefanstapelberg/Desktop/FSD_PROJECT/CryptoCanvas/crypto-canvas/src/components/PriceOverTime.vue"],"sourcesContent":["<template>\n    <div>\n      <div id=\"price-chart\"></div> <!-- Container for the D3.js chart -->\n    </div>\n  </template>\n  \n  <script>\n  import * as d3 from 'd3';\n  import axios from 'axios';\n  import config from './config';\n  \n  export default {\n    name: 'PriceChart',\n    data() {\n      return {\n        coins: ['Bitcoin', 'Ethereum', 'Ripple', 'Litecoin', 'Cardano'], // Hardcoded coins\n        pricesData: {}, // This will store the price data for each coin\n      };\n    },\n    mounted() {\n      this.fetchPriceData();\n    },\n    methods: {\n      async fetchPriceData() {\n        // Fetch data for each coin\n        for (const coin of this.coins) {\n          const response = await axios.get(`${config.backendApiUrl}/getCoinData/${coin}`);\n          // Process the data to be suitable for the line chart\n          this.pricesData[coin] = response.data.data.map(d => ({\n            date: new Date(d.Date), // Convert string date to Date object\n            price: +d.Close // Convert string price to number\n          }));\n        }\n        this.drawPriceChart();\n      },\n      drawPriceChart() {\n        const margin = { top: 10, right: 30, bottom: 30, left: 60 },\n              width = 460 - margin.left - margin.right,\n              height = 400 - margin.top - margin.bottom;\n  \n        // Remove any existing SVG to avoid overlapping charts\n        d3.select('#price-chart').select('svg').remove();\n  \n        // Append the svg object to the body of the page\n        const svg = d3.select('#price-chart')\n          .append('svg')\n          .attr('width', width + margin.left + margin.right)\n          .attr('height', height + margin.top + margin.bottom)\n          .append('g')\n          .attr('transform', `translate(${margin.left},${margin.top})`);\n  \n        // Add X axis --> it is a date format\n        const x = d3.scaleTime()\n          .domain(d3.extent(this.pricesData[this.coins[0]], d => d.date))\n          .range([0, width]);\n        svg.append('g')\n          .attr('transform', `translate(0,${height})`)\n          .call(d3.axisBottom(x));\n  \n        // Add Y axis\n        const y = d3.scaleLinear()\n          .domain([0, d3.max(this.coins.flatMap(coin => this.pricesData[coin].map(d => d.price)))])\n          .range([height, 0]);\n        svg.append('g')\n          .call(d3.axisLeft(y));\n  \n        // color palette\n        const color = d3.scaleOrdinal()\n          .domain(this.coins)\n          .range(d3.schemeSet2);\n  \n        // Draw the line\n        for (const coin of this.coins) {\n          svg.append('path')\n            .datum(this.pricesData[coin])\n            .attr('fill', 'none')\n            .attr('stroke', color(coin))\n            .attr('stroke-width', 1.5)\n            .attr('d', d3.line()\n              .x(d => x(d.date))\n              .y(d => y(d.price))\n            );\n        }\n      }\n    }\n  };\n  </script>\n  \n  <style>\n  .tooltip {\n    position: absolute;\n    text-align: center;\n    transition: opacity 0.3s;\n  }\n  </style>\n  \n  "],"mappings":";gCAEMA,mBAAA,CAA4B;EAAvBC,EAAE,EAAC;AAAa;;;uBADvBC,mBAAA,CAEM,cADJC,UAA4B,EAACC,mBAAA,mCAAsC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}