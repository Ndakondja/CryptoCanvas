{"ast":null,"code":"import axios from 'axios';\nimport config from './config';\nimport * as d3 from 'd3';\nexport default {\n  name: 'MarketCapTreeMap',\n  data() {\n    return {\n      marketCapData: []\n    };\n  },\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  mounted() {\n    this.fetchMarketCapData();\n  },\n  watch: {\n    selectedTimeRange() {\n      this.fetchMarketCapData();\n    },\n    selectedCoins() {\n      this.fetchMarketCapData();\n    }\n  },\n  methods: {\n    async fetchMarketCapData() {\n      try {\n        const response = await axios.get(`${config.backendApiUrl}/getMarketCapData`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        });\n        this.marketCapData = response.data;\n        this.drawTreemap();\n      } catch (error) {\n        console.error('Error fetching market cap data:', error);\n      }\n    },\n    drawTreemap() {\n      const data = this.marketCapData;\n\n      // Define dimensions and margins for the treemap\n      const margin = {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      };\n      const width = 960 - margin.left - margin.right;\n      const height = 500 - margin.top - margin.bottom;\n\n      // Remove any existing SVG to avoid overlaps\n      d3.select('#market-cap-treemap').select('svg').remove();\n\n      // Create an SVG container\n      const svg = d3.select('#market-cap-treemap').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n      // Create a hierarchy from the data and compute the treemap layout\n      const root = d3.hierarchy({\n        children: data\n      }).sum(d => d.marketCap) // Use marketCap for the area size\n      .sort((a, b) => b.height - a.height || b.value - a.value);\n      d3.treemap().size([width, height]).padding(1)(root);\n\n      // Define the color scale\n      const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n      // Draw rectangles for each node\n      const nodes = svg.selectAll('g').data(root.leaves()).enter().append('g').attr('transform', d => `translate(${d.x0},${d.y0})`);\n      nodes.append('rect').attr('width', d => d.x1 - d.x0).attr('height', d => d.y1 - d.y0).style('fill', d => color(d.data.name));\n\n      // Add titles to the rectangles\n      nodes.append('text').attr('x', 5).attr('y', 20).text(d => d.data.name).attr('font-size', '15px').attr('fill', 'white');\n    }\n  }\n};","map":{"version":3,"names":["axios","config","d3","name","data","marketCapData","props","selectedTimeRange","String","selectedCoins","Array","mounted","fetchMarketCapData","watch","methods","response","get","backendApiUrl","params","timeRange","coins","join","drawTreemap","error","console","margin","top","right","bottom","left","width","height","select","remove","svg","append","attr","root","hierarchy","children","sum","d","marketCap","sort","a","b","value","treemap","size","padding","color","scaleOrdinal","schemeCategory10","nodes","selectAll","leaves","enter","x0","y0","x1","y1","style","text"],"sources":["/Users/stefanstapelberg/Desktop/FSD_PROJECT/CryptoCanvas/crypto-canvas/src/components/MarketCapTreeMap.vue"],"sourcesContent":["<template>\n    <div>\n      <h2>Market Capitalization Treemap</h2>\n      <div id=\"market-cap-treemap\"></div> <!-- Container for the D3.js treemap -->\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import config from './config';\n  import * as d3 from 'd3';\n  \n  export default {\n    name: 'MarketCapTreeMap',\n    data() {\n      return {\n        marketCapData: []\n      };\n    },\n    props: {\n      selectedTimeRange: String,\n      selectedCoins: Array\n    },\n    mounted() {\n      this.fetchMarketCapData();\n    },\n    watch: {\n      selectedTimeRange() {\n        this.fetchMarketCapData();\n      },\n      selectedCoins() {\n        this.fetchMarketCapData();\n      }\n    },\n    methods: {\n      async fetchMarketCapData() {\n        try {\n          const response = await axios.get(`${config.backendApiUrl}/getMarketCapData`, {\n            params: { \n              timeRange: this.selectedTimeRange,\n              coins: this.selectedCoins.join(',')\n            }\n          });\n          this.marketCapData = response.data;\n          this.drawTreemap();\n        } catch (error) {\n          console.error('Error fetching market cap data:', error);\n        }\n      },\n      drawTreemap() {\n        const data = this.marketCapData;\n  \n        // Define dimensions and margins for the treemap\n        const margin = { top: 10, right: 10, bottom: 10, left: 10 };\n        const width = 960 - margin.left - margin.right;\n        const height = 500 - margin.top - margin.bottom;\n  \n        // Remove any existing SVG to avoid overlaps\n        d3.select('#market-cap-treemap').select('svg').remove();\n  \n        // Create an SVG container\n        const svg = d3.select('#market-cap-treemap')\n          .append('svg')\n          .attr('width', width + margin.left + margin.right)\n          .attr('height', height + margin.top + margin.bottom)\n          .append('g')\n          .attr('transform', `translate(${margin.left},${margin.top})`);\n  \n        // Create a hierarchy from the data and compute the treemap layout\n        const root = d3.hierarchy({ children: data })\n          .sum(d => d.marketCap) // Use marketCap for the area size\n          .sort((a, b) => b.height - a.height || b.value - a.value);\n  \n        d3.treemap()\n          .size([width, height])\n          .padding(1)(root);\n  \n        // Define the color scale\n        const color = d3.scaleOrdinal(d3.schemeCategory10);\n  \n        // Draw rectangles for each node\n        const nodes = svg.selectAll('g')\n          .data(root.leaves())\n          .enter()\n          .append('g')\n          .attr('transform', d => `translate(${d.x0},${d.y0})`);\n  \n        nodes.append('rect')\n          .attr('width', d => d.x1 - d.x0)\n          .attr('height', d => d.y1 - d.y0)\n          .style('fill', d => color(d.data.name));\n  \n        // Add titles to the rectangles\n        nodes.append('text')\n          .attr('x', 5)\n          .attr('y', 20)\n          .text(d => d.data.name)\n          .attr('font-size', '15px')\n          .attr('fill', 'white');\n      }\n    }\n  }\n  </script>\n  \n  <style>\n  /* Add styling for your treemap here */\n  #market-cap-treemap svg {\n    font-family: 'Arial', sans-serif;\n  }\n  </style>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}