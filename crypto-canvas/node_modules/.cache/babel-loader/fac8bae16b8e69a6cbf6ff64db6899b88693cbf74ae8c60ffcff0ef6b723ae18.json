{"ast":null,"code":"import * as d3 from 'd3';\nexport default {\n  name: 'VolatilityComparison',\n  data() {\n    return {\n      selectedTimeFrame: '1m',\n      originalData: []\n    };\n  },\n  mounted() {\n    this.fetchAndProcessData();\n  },\n  methods: {\n    fetchAndProcessData() {\n      fetch('volatility_comparison.json').then(response => response.json()).then(rawData => {\n        console.log('Fetched data:', rawData);\n        if (rawData && rawData.length) {\n          this.originalData = rawData;\n          this.filterData();\n        } else {\n          console.error('Data is empty or not in expected format');\n        }\n      }).catch(error => console.error('Error fetching data:', error));\n    },\n    filterData() {\n      const filteredData = this.filterByTimeFrame(this.originalData, this.selectedTimeFrame);\n      const transformedData = this.transformData(filteredData);\n      this.createVolatilityComparison(transformedData);\n    },\n    filterByTimeFrame(data, timeFrame) {\n      const endDate = new Date();\n      let startDate = new Date();\n      switch (timeFrame) {\n        case '1m':\n          startDate.setMonth(endDate.getMonth() - 1);\n          break;\n        case '1y':\n          startDate.setFullYear(endDate.getFullYear() - 1);\n          break;\n        case '5y':\n          startDate.setFullYear(endDate.getFullYear() - 5);\n          break;\n      }\n      return data.filter(d => new Date(d.date) >= startDate && new Date(d.date) <= endDate);\n    },\n    transformData(rawData) {\n      const groupedData = d3.groups(rawData, d => d.name).map(([name, values]) => ({\n        name,\n        values\n      }));\n      return groupedData;\n    },\n    createVolatilityComparison(data) {\n      d3.select(this.$refs.volatilityChart).selectAll(\"*\").remove();\n      const margin = {\n          top: 10,\n          right: 30,\n          bottom: 30,\n          left: 50\n        },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n      const svg = d3.select(this.$refs.volatilityChart).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n      // Add X axis --> it is a date format\n      const x = d3.scaleTime().domain(d3.extent(this.originalData, d => new Date(d.date))).range([0, width]);\n      svg.append(\"g\").attr(\"transform\", `translate(0, ${height})`).call(d3.axisBottom(x));\n\n      // Add Y axis\n      const y = d3.scaleLinear().domain([0, d3.max(this.originalData, d => +d.value)]).range([height, 0]);\n      svg.append(\"g\").call(d3.axisLeft(y));\n\n      // Color scale\n      const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n      // Draw the line for each group\n      data.forEach(crypto => {\n        const line = d3.line().x(d => x(new Date(d.date))).y(d => y(+d.value));\n        svg.append(\"path\").datum(crypto.values).attr(\"fill\", \"none\").attr(\"stroke\", color(crypto.name)).attr(\"stroke-width\", 1.5).attr(\"d\", line);\n      });\n    }\n  }\n};","map":{"version":3,"names":["d3","name","data","selectedTimeFrame","originalData","mounted","fetchAndProcessData","methods","fetch","then","response","json","rawData","console","log","length","filterData","error","catch","filteredData","filterByTimeFrame","transformedData","transformData","createVolatilityComparison","timeFrame","endDate","Date","startDate","setMonth","getMonth","setFullYear","getFullYear","filter","d","date","groupedData","groups","map","values","select","$refs","volatilityChart","selectAll","remove","margin","top","right","bottom","left","width","height","svg","append","attr","x","scaleTime","domain","extent","range","call","axisBottom","y","scaleLinear","max","value","axisLeft","color","scaleOrdinal","schemeCategory10","forEach","crypto","line","datum"],"sources":["/Users/zaheer/Coding/CryptoCanvas/crypto-canvas/src/components/VolatilityComparison.vue"],"sourcesContent":["<template>\n  <div>\n    <select v-model=\"selectedTimeFrame\" @change=\"filterData\">\n      <option value=\"1m\">1 Month</option>\n      <option value=\"1y\">1 Year</option>\n      <option value=\"5y\">5 Years</option>\n    </select>\n    <div class=\"volatility-comparison\" ref=\"volatilityChart\"></div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'VolatilityComparison',\n  data() {\n    return {\n      selectedTimeFrame: '1m',\n      originalData: []\n    };\n  },\n  mounted() {\n    this.fetchAndProcessData();\n  },\n  methods: {\n    fetchAndProcessData() {\n      fetch('volatility_comparison.json')\n        .then(response => response.json())\n        .then(rawData => {\n          console.log('Fetched data:', rawData);\n          if (rawData && rawData.length) {\n            this.originalData = rawData;\n            this.filterData();\n          } else {\n            console.error('Data is empty or not in expected format');\n          }\n        })\n        .catch(error => console.error('Error fetching data:', error));\n    },\n    filterData() {\n      const filteredData = this.filterByTimeFrame(this.originalData, this.selectedTimeFrame);\n      const transformedData = this.transformData(filteredData);\n      this.createVolatilityComparison(transformedData);\n    },\n    filterByTimeFrame(data, timeFrame) {\n      const endDate = new Date();\n      let startDate = new Date();\n      switch (timeFrame) {\n        case '1m':\n          startDate.setMonth(endDate.getMonth() - 1);\n          break;\n        case '1y':\n          startDate.setFullYear(endDate.getFullYear() - 1);\n          break;\n        case '5y':\n          startDate.setFullYear(endDate.getFullYear() - 5);\n          break;\n      }\n      return data.filter(d => new Date(d.date) >= startDate && new Date(d.date) <= endDate);\n    },\n    transformData(rawData) {\n      const groupedData = d3.groups(rawData, d => d.name)\n                           .map(([name, values]) => ({ name, values }));\n      return groupedData;\n    },\n    createVolatilityComparison(data) {\n      d3.select(this.$refs.volatilityChart).selectAll(\"*\").remove();\n\n      const margin = { top: 10, right: 30, bottom: 30, left: 50 },\n            width = 460 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n\n      const svg = d3.select(this.$refs.volatilityChart)\n        .append(\"svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n          .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n      // Add X axis --> it is a date format\n      const x = d3.scaleTime()\n        .domain(d3.extent(this.originalData, d => new Date(d.date)))\n        .range([0, width]);\n      svg.append(\"g\")\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(d3.axisBottom(x));\n\n      // Add Y axis\n      const y = d3.scaleLinear()\n        .domain([0, d3.max(this.originalData, d => +d.value)])\n        .range([height, 0]);\n      svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n      // Color scale\n      const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n      // Draw the line for each group\n      data.forEach((crypto) => {\n        const line = d3.line()\n          .x(d => x(new Date(d.date)))\n          .y(d => y(+d.value));\n\n        svg.append(\"path\")\n          .datum(crypto.values)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", color(crypto.name))\n          .attr(\"stroke-width\", 1.5)\n          .attr(\"d\", line);\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.volatility-comparison {\n  width: 100%;\n  height: 400px;\n}\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}