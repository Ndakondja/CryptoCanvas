{"ast":null,"code":"import axios from 'axios';\nimport config from './config';\nimport * as d3 from 'd3';\nexport default {\n  name: 'MarketCapTreeMap',\n  data() {\n    return {\n      marketCapData: []\n    };\n  },\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  mounted() {\n    this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins);\n  },\n  watch: {\n    selectedTimeRange() {\n      this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins);\n    },\n    selectedCoins() {\n      this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins);\n    }\n  },\n  methods: {\n    async fetchMarketCapData() {\n      try {\n        const response = await axios.get(`${config.backendApiUrl}/getMarketCapData`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        });\n        this.marketCapData = response.data;\n        this.drawTreemap(this.selectedTimeRange, this.selectedCoins);\n      } catch (error) {\n        console.error('Error fetching market cap data:', error);\n      }\n    },\n    drawTreemap() {\n      const data = this.marketCapData;\n      const container = d3.select('#market-cap-treemap');\n      console.log('Drawing Treemap with Data:', this.marketCapData);\n\n      // Define dimensions and margins for the treemap\n      const width = 800;\n      const height = 400;\n      const margin = {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      };\n      container.select('svg').remove();\n\n      // Create an SVG container\n      const svg = d3.select('#market-cap-treemap').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n      // Create a hierarchy from the data and compute the treemap layout\n      const root = d3.hierarchy({\n        children: data\n      }).sum(d => d.marketCap); // Use marketCap for the area size\n\n      d3.treemap().size([width, height]).padding(4)(root);\n\n      // Draw rectangles for each node\n      svg.selectAll('rect').data(root.leaves()).enter().append('rect').attr('x', d => d.x0).attr('y', d => d.y0).attr('width', d => d.x1 - d.x0).attr('height', d => d.y1 - d.y0).style('fill', 'steelblue');\n\n      // Add labels\n      svg.selectAll('text').data(root.leaves()).enter().append('text').attr('x', d => d.x0 + 5).attr('y', d => d.y0 + 20).text(d => d.data.coin).attr('font-size', '15px').attr('fill', 'white');\n    }\n  }\n};","map":{"version":3,"names":["axios","config","d3","name","data","marketCapData","props","selectedTimeRange","String","selectedCoins","Array","mounted","fetchMarketCapData","watch","methods","response","get","backendApiUrl","params","timeRange","coins","join","drawTreemap","error","console","container","select","log","width","height","margin","top","right","bottom","left","remove","svg","append","attr","root","hierarchy","children","sum","d","marketCap","treemap","size","padding","selectAll","leaves","enter","x0","y0","x1","y1","style","text","coin"],"sources":["/Users/stefanstapelberg/Desktop/FSD_PROJECT/CryptoCanvas/crypto-canvas/src/components/MarketCapTreeMap.vue"],"sourcesContent":["<template>\n    <div>\n      <h2>Market Capitalization Treemap</h2>\n      <div id=\"market-cap-treemap\"></div> <!-- Container for the D3.js treemap -->\n    </div>\n  </template>\n\n<script>\nimport axios from 'axios'\nimport config from './config'\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'MarketCapTreeMap',\n  data () {\n    return {\n      marketCapData: []\n    }\n  },\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  mounted () {\n    this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins)\n  },\n  watch: {\n    selectedTimeRange () {\n      this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins)\n    },\n    selectedCoins () {\n      this.fetchMarketCapData(this.selectedTimeRange, this.selectedCoins)\n    }\n  },\n  methods: {\n    async fetchMarketCapData () {\n      try {\n        const response = await axios.get(`${config.backendApiUrl}/getMarketCapData`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        })\n        this.marketCapData = response.data\n        this.drawTreemap(this.selectedTimeRange, this.selectedCoins)\n      } catch (error) {\n        console.error('Error fetching market cap data:', error)\n      }\n    },\n    drawTreemap () {\n      const data = this.marketCapData\n      const container = d3.select('#market-cap-treemap')\n      console.log('Drawing Treemap with Data:', this.marketCapData)\n\n      // Define dimensions and margins for the treemap\n      const width = 800; const height = 400\n      const margin = { top: 10, right: 10, bottom: 10, left: 10 }\n      container.select('svg').remove()\n\n      // Create an SVG container\n      const svg = d3.select('#market-cap-treemap')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      // Create a hierarchy from the data and compute the treemap layout\n      const root = d3.hierarchy({ children: data })\n        .sum(d => d.marketCap) // Use marketCap for the area size\n\n      d3.treemap()\n        .size([width, height])\n        .padding(4)(root)\n\n      // Draw rectangles for each node\n      svg\n        .selectAll('rect')\n        .data(root.leaves())\n        .enter()\n        .append('rect')\n        .attr('x', d => d.x0)\n        .attr('y', d => d.y0)\n        .attr('width', d => d.x1 - d.x0)\n        .attr('height', d => d.y1 - d.y0)\n        .style('fill', 'steelblue')\n\n      // Add labels\n      svg\n        .selectAll('text')\n        .data(root.leaves())\n        .enter()\n        .append('text')\n        .attr('x', d => d.x0 + 5)\n        .attr('y', d => d.y0 + 20)\n        .text(d => d.data.coin)\n        .attr('font-size', '15px')\n        .attr('fill', 'white')\n    }\n  }\n}\n</script>\n\n  <style>\n  /* Add styling for your treemap here */\n  #market-cap-treemap svg {\n    font-family: 'Arial', sans-serif;\n  }\n  </style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}