{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"heatmap\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1"],"sources":["/Users/stefanstapelberg/Desktop/FSD_PROJECT/CryptoCanvas/crypto-canvas/src/components/CorrelationMatrix.vue"],"sourcesContent":["<!-- eslint-disable no-multiple-empty-lines -->\n<template>\n  <div id=\"heatmap\"></div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\nimport axios from 'axios'\nimport config from './config'\n\nexport default {\n  // eslint-disable-next-line vue/multi-word-component-names\n  name: 'Heatmap',\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  mounted () {\n    this.fetchCorrelationMatrix()\n  },\n  // CorrelationMatrix.vue\n  watch: {\n    selectedTimeRange(newVal) {\n      this.fetchCorrelationMatrix();\n    },\n    selectedCoins(newVal) {\n      this.fetchCorrelationMatrix();\n    }\n  },\n  methods: {\n    async fetchCorrelationMatrix () {\n      try {\n        const response = await axios.get(config.backendApiUrl.concat('/getCorrelationMatrix'), {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        })\n        this.drawHeatmap(response.data.matrix, response.data.labels)\n      } catch (error) {\n        console.error('Error fetching correlation matrix:', error)\n      }\n    },\n    drawHeatmap (matrix, labels) {\n      // Define the dimensions and margins for the heatmap\n      const margin = { top: 80, right: 80, bottom: 80, left: 80 }\n      const width = 1000 - margin.left - margin.right\n      const height = 400 - margin.top - margin.bottom\n\n      // Remove any existing SVG to avoid overlapping heatmaps\n      d3.select('#heatmap').select('svg').remove()\n\n      // Append the svg object to the body of the page\n      const svg = d3.select('#heatmap')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      // Build X scales and axis\n      const x = d3.scaleBand()\n        .range([0, width])\n        .domain(labels)\n        .padding(0.05)\n      svg.append('g')\n        .style('font-size', 15)\n        .attr('transform', `translate(0,${height})`)\n        .call(d3.axisBottom(x).tickSize(0))\n        .select('.domain').remove()\n\n      // Build Y scales and axis\n      const y = d3.scaleBand()\n        .range([height, 0])\n        .domain(labels)\n        .padding(0.05)\n      svg.append('g')\n        .style('font-size', 15)\n        .call(d3.axisLeft(y).tickSize(0))\n        .select('.domain').remove()\n\n      // Build color scale\n      const myColor = d3.scaleSequential()\n        .interpolator(d3.interpolateInferno)\n        .domain([0, 1])\n\n      // create a tooltip\n      const tooltip = d3.select('#heatmap')\n        .append('div')\n        .style('opacity', 0)\n        .attr('class', 'tooltip')\n        .style('background-color', 'white')\n        .style('border', 'solid')\n        .style('border-width', '2px')\n        .style('border-radius', '5px')\n        .style('padding', '5px')\n        .style('position', 'absolute')\n\n      // Three functions that change the tooltip when user hovers, moves, or leaves a cell\n      const mouseover = function (event, d) {\n        tooltip.style('opacity', 1)\n        d3.select(this)\n          .style('stroke', 'black')\n          .style('opacity', 1)\n      }\n      const mousemove = function (event, d) {\n        tooltip.html('Correlation: ' + d.value.toFixed(2))\n          .style('left', (event.x) + 'px')\n          .style('top', (event.y) + 'px')\n      }\n      const mouseleave = function (event, d) {\n        tooltip.style('opacity', 0)\n        d3.select(this)\n          .style('stroke', 'none')\n          .style('opacity', 0.8)\n      }\n\n      // Add the squares\n      svg.selectAll()\n        .data(matrix.flatMap((row, i) => row.map((value, j) => ({ row: labels[i], column: labels[j], value }))))\n        .enter()\n        .append('rect')\n        .attr('x', d => x(d.column))\n        .attr('y', d => y(d.row))\n        .attr('rx', 4)\n        .attr('ry', 4)\n        .attr('width', x.bandwidth())\n        .attr('height', y.bandwidth())\n        .style('fill', d => myColor(d.value))\n        .style('stroke-width', 4)\n        .style('stroke', 'none')\n        .style('opacity', 0.8)\n        .on('mouseover', mouseover)\n        .on('mousemove', mousemove)\n        .on('mouseleave', mouseleave)\n    }\n  }\n}\n\n</script>\n\n<style>\n.tooltip {\n  position: absolute;\n  text-align: center;\n  transition: opacity 0.3s;\n}\n</style>\n"],"mappings":";;EAEOA,EAAE,EAAC;AAAS;;uBAAjBC,mBAAA,CAAwB,OAAxBC,UAAwB"},"metadata":{},"sourceType":"module","externalDependencies":[]}