{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, vModelSelect as _vModelSelect, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = [\"value\"];\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"svg\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h3\", null, _toDisplayString($props.title), 1 /* TEXT */), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selected = $event)\n  }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($props.companies, company => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: company,\n      value: company\n    }, _toDisplayString($options.titleCase(company)), 9 /* TEXT, PROPS */, _hoisted_1);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.selected]]), _hoisted_2, _hoisted_3]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_toDisplayString","$props","title","$data","selected","$event","_Fragment","_renderList","companies","company","key","value","$options","titleCase","_hoisted_1","_hoisted_2","_hoisted_3"],"sources":["/Users/zaheer/Coding/CryptoCanvas/crypto-canvas/src/components/BitcoinHalving.vue"],"sourcesContent":["<template>\n  <div>\n    <h3>{{title}}</h3>\n    <select v-model=\"selected\" >\n      <option v-for=\"company in companies\" :key=\"company\" :value=\"company\">{{titleCase(company)}}</option>\n    </select>\n    <br />\n    <svg></svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\"\n\nexport default {\n  name: 'Chart',\n  props: ['axisData', 'companies', 'title'],\n  data() {\n    return {\n      selected: this.companies[0],\n    }\n  },\n  computed: {\n    filteredData() {\n      return this.axisData.filter(el => el.company === this.selected)\n    },\n    maxValue() {\n      return Math.max(...this.filteredData.map(el => el.y))\n    },\n  },\n  methods: {\n    titleCase(title) {\n      return title.charAt(0).toUpperCase() + title.slice(1)\n    },\n    renderChart() {\n      const height = 300\n      const roundedHeight = Math.ceil((height + 1)/10) * 10\n      const width = 800\n\n      // set the ranges\n      const xScale = d3\n        .scaleBand()\n        .domain(this.filteredData.map(dataPoint => dataPoint.x))\n        .range([0, width])\n        .padding(0.2)\n\n      const yScale = d3\n        .scaleLinear()\n        .domain([0, this.maxValue])\n        .range([roundedHeight, 10])\n\n      const container = d3.select('svg')\n        .classed('chart-container', true)\n        .style('height', `${roundedHeight}px`)\n        .style('width', `${width}px`)\n\n      // eslint-disable-next-line no-unused-vars\n      const bar = container\n        .selectAll('.bar')\n        .data(this.filteredData)\n        .enter()\n        .append('rect')\n        .classed('bar', true)\n        .attr('width', xScale.bandwidth())\n        .attr('height', data => roundedHeight - yScale(data.y))\n        .attr('x', data => (xScale(data.x)))\n        .attr('y', data => yScale(data.y))\n\n      // add the x Axis\n      container.append(\"g\")\n        .attr('transform', \"translate(0,\" + roundedHeight + \")\")\n        .call(d3.axisBottom(xScale))\n        .selectAll('text')\n        .attr('transform', \"translate(-15, 15) rotate(-45)\");\n\n      // add the y Axis\n      container.append(\"g\")\n        .call(d3.axisLeft(yScale));\n    }\n  },\n  mounted() {\n    this.renderChart()\n  },\n  updated() {\n    this.renderChart()\n  },\n  beforeUpdate() {\n    var svg = d3.select(\"svg\")\n    svg\n      .selectAll('*')\n      .remove()\n  },\n}\n</script>\n\n<style>\n  .chart-container {\n    border: 1px solid navy;\n    margin-left: auto;\n    margin-right: auto;\n    overflow: visible;\n  }\n\n  .bar { \n    fill: rgb(255, 0, 212);\n  }\n\n  text {\n    fill: navy;\n    font-size: smaller;\n  }\n\n  path.domain {\n    stroke: transparent;\n  }\n\n  select {\n    margin-bottom: 20px;\n  }\n</style>"],"mappings":";;gCAMIA,mBAAA,CAAM;gCACNA,mBAAA,CAAW;;;uBANbC,mBAAA,CAOM,cANJD,mBAAA,CAAkB,YAAAE,gBAAA,CAAZC,MAAA,CAAAC,KAAK,kB,gBACXJ,mBAAA,CAES;+DAFQK,KAAA,CAAAC,QAAQ,GAAAC,MAAA;yBACvBN,mBAAA,CAAoGO,SAAA,QAAAC,WAAA,CAA1EN,MAAA,CAAAO,SAAS,EAApBC,OAAO;yBAAtBV,mBAAA,CAAoG;MAA9DW,GAAG,EAAED,OAAO;MAAGE,KAAK,EAAEF;wBAAWG,QAAA,CAAAC,SAAS,CAACJ,OAAO,yBAAAK,UAAA;2EADzEX,KAAA,CAAAC,QAAQ,E,GAGzBW,UAAM,EACNC,UAAW,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}