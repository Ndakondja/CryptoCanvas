{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Cryptocurrency Price Over Period\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"price-chart\"\n}, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _hoisted_2, _createCommentVNode(\" Container for the D3.js chart \")]);\n}","map":{"version":3,"names":["_createElementVNode","id","_createElementBlock","_hoisted_1","_hoisted_2","_createCommentVNode"],"sources":["C:\\Projects\\CryptoCanvas\\crypto-canvas\\src\\components\\PriceOverTime.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <h2>Cryptocurrency Price Over Period</h2>\r\n        <div id=\"price-chart\"></div> <!-- Container for the D3.js chart -->\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3'\r\nimport axios from 'axios'\r\nimport config from './config'\r\n\r\nexport default {\r\n  name: 'PriceChart',\r\n  props: {\r\n    selectedTimeRange: String,\r\n    selectedCoins: {\r\n      type: Array\r\n    }\r\n  },\r\n  mounted () {\r\n    this.fetchAllCoinData(this.selectedTimeRange, this.selectedCoins)\r\n  },\r\n  data () {\r\n    return {\r\n      pricesData: {},\r\n      colorScale: d3.scaleOrdinal(d3.schemeSet2)\r\n    }\r\n  },\r\n  watch: {\r\n    selectedTimeRange () {\r\n      this.fetchAllCoinData(this.selectedTimeRange, this.selectedCoins)\r\n    },\r\n    selectedCoins () {\r\n      this.fetchAllCoinData(this.selectedTimeRange, this.selectedCoins)\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchAllCoinData (timeRange, coins) {\r\n      try {\r\n        const coinQueryParam = coins.join(',')\r\n        const response = await axios.get(`${config.backendApiUrl}/getAllCoinData`, {\r\n          params: { timeRange, coins: coinQueryParam }\r\n        })\r\n        this.pricesData = this.processData(response.data.data)\r\n        this.drawPriceChart()\r\n      } catch (error) {\r\n        console.error('Error fetching all coin data:', error)\r\n      }\r\n    },\r\n    processData (data) {\r\n      const processedData = {}\r\n      data.forEach(d => {\r\n        const coin = d.Coin\r\n        const date = new Date(d.Date)\r\n        const price = +d.Close\r\n\r\n        if (!processedData[coin]) {\r\n          processedData[coin] = []\r\n        }\r\n        processedData[coin].push({ date, price })\r\n      })\r\n      return processedData\r\n    },\r\n    drawPriceChart () {\r\n      const margin = { top: 5, right: 30, bottom: 30, left: 60 }\r\n      const width = 700 - margin.left - margin.right\r\n      const height = 280 - margin.top - margin.bottom\r\n      d3.select('#price-chart').select('svg').remove()\r\n\r\n      const svg = d3.select('#price-chart')\r\n        .append('svg')\r\n        .attr('width', width + margin.left + margin.right)\r\n        .attr('height', height + margin.top + margin.bottom)\r\n        .append('g')\r\n        .attr('transform', `translate(${margin.left},${margin.top})`)\r\n\r\n      const x = d3.scaleTime()\r\n        .domain(d3.extent(Object.values(this.pricesData).flat(), d => d.date))\r\n        .range([0, width])\r\n      svg.append('g')\r\n        .attr('transform', `translate(0,${height})`)\r\n        .call(d3.axisBottom(x))\r\n\r\n      const y = d3.scaleLinear()\r\n        .domain([0, d3.max(Object.values(this.pricesData).flat(), d => d.price)])\r\n        .range([height, 0])\r\n      svg.append('g')\r\n        .call(d3.axisLeft(y))\r\n\r\n      const color = d3.scaleOrdinal()\r\n        .domain(Object.keys(this.pricesData))\r\n        .range(d3.schemeSet2)\r\n\r\n      Object.keys(this.pricesData).forEach(coin => {\r\n        svg.append('path')\r\n          .datum(this.pricesData[coin])\r\n          .attr('fill', 'none')\r\n          .attr('stroke', color(coin))\r\n          .attr('stroke-width', 1.5)\r\n          .attr('d', d3.line()\r\n            .x(d => x(d.date))\r\n            .y(d => y(d.price))\r\n\r\n          )\r\n      })\r\n      // Legend code\r\n      const legendYPosition = height + margin.bottom + margin.top - 10\r\n      const legendSpace = width / Object.keys(this.pricesData).length // Spacing for legend items\r\n\r\n      Object.keys(this.pricesData).forEach((coin, index) => {\r\n        svg.append('text')\r\n          .attr('x', (legendSpace / 2) + index * legendSpace) // Spacing of legend items\r\n          .attr('y', legendYPosition + 5)\r\n          .attr('class', 'legend') // Style the legend\r\n          .style('fill', this.colorScale(coin)) // Use the same color scale\r\n          .text(coin)\r\n\r\n        // Optional: Add colored rectangles next to text if needed\r\n        svg.append('rect')\r\n          .attr('x', (legendSpace / 2) - 10 + index * legendSpace)\r\n          .attr('y', legendYPosition - 5)\r\n          .attr('width', 10)\r\n          .attr('height', 10)\r\n          .style('fill', this.colorScale(coin)) // Use the same color scale\r\n      })\r\n      // After defining your scales and axes (right after the y axis is appended):\r\n      svg.append('g')\r\n        .call(d3.axisLeft(y))\r\n      // Y Axis title\r\n      svg.append('text')\r\n        .attr('transform', 'rotate(-90)')\r\n        .attr('y', 0 - margin.left)\r\n        .attr('x', 0 - (height / 2))\r\n        .attr('dy', '1em')\r\n        .style('text-anchor', 'middle')\r\n        .style('font-size', '10px') // Adjust t\r\n        .text('USD') // Replace with your desired y-axis label\r\n\r\n      // Tooltip for line hover\r\n      const tooltip = d3.select('#price-chart').append('div')\r\n        .attr('class', 'tooltip')\r\n        .append('div')\r\n        .style('opacity', 0)\r\n        .attr('class', 'tooltip')\r\n        .style('background-color', 'white')\r\n        .style('border', 'solid')\r\n        .style('border-width', '2px')\r\n        .style('border-radius', '5px')\r\n        .style('padding', '5px')\r\n        .style('position', 'absolute')\r\n\r\n      Object.keys(this.pricesData).forEach(coin => {\r\n        const line = svg.append('path')\r\n          .datum(this.pricesData[coin])\r\n          .attr('fill', 'none')\r\n          .attr('stroke', color(coin))\r\n          .attr('stroke-width', 1.5)\r\n          .attr('d', d3.line()\r\n            .x(d => x(d.date))\r\n            .y(d => y(d.price))\r\n          )\r\n\r\n        // Event listeners for tooltip\r\n        line.on('mouseover', () => tooltip.style('opacity', 1))\r\n          .on('mousemove', function (event, d) {\r\n            const [xPosition, yPosition] = d3.pointer(event, this)\r\n            tooltip.html(`Price: ${y.invert(yPosition).toFixed(2)}`)\r\n              .style('left', (xPosition + 40) + 'px')\r\n              .style('top', (yPosition - 360) + 'px')\r\n          })\r\n          .on('mouseleave', () => tooltip.style('opacity', 0))\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\nh2 {\r\n  text-align: left;\r\n  margin-top: 20px; /* Add top margin if needed */\r\n  margin-left: 100px;\r\n}\r\n\r\n#price-chart {\r\n  padding-top: 20px;\r\n  padding-left: 20px;\r\n}\r\n\r\n.tooltip {\r\n  position: absolute;\r\n  text-align: center;\r\n  transition: opacity 0.3s;\r\n}\r\n\r\n.legend {\r\n  font-size: 12px;\r\n}\r\n</style>\r\n"],"mappings":";gCAEQA,mBAAA,CAAyC,YAArC,kCAAgC;gCACpCA,mBAAA,CAA4B;EAAvBC,EAAE,EAAC;AAAa;;;uBAFzBC,mBAAA,CAGM,cAFFC,UAAyC,EACzCC,UAA4B,EAACC,mBAAA,mCAAsC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}