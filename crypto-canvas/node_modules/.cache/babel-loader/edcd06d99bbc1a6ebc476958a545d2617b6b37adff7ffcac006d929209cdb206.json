{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelSelect as _vModelSelect, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4df8873e\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"1m\"\n}, \"1 Month\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"1y\"\n}, \"1 Year\", -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"option\", {\n  value: \"5y\"\n}, \"5 Years\", -1 /* HOISTED */));\nconst _hoisted_4 = [_hoisted_1, _hoisted_2, _hoisted_3];\nconst _hoisted_5 = {\n  class: \"volatility-comparison\",\n  ref: \"volatilityChart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedTimeFrame = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.filterData && $options.filterData(...args))\n  }, [..._hoisted_4], 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelSelect, $data.selectedTimeFrame]]), _createElementVNode(\"div\", _hoisted_5, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["_createElementVNode","value","_hoisted_1","_hoisted_2","_hoisted_3","class","ref","_createElementBlock","$data","selectedTimeFrame","$event","onChange","_cache","args","$options","filterData","_hoisted_5"],"sources":["/Users/zaheer/Coding/CryptoCanvas/crypto-canvas/src/components/VolatilityComparison.vue"],"sourcesContent":["<template>\n  <div>\n    <select v-model=\"selectedTimeFrame\" @change=\"filterData\">\n      <option value=\"1m\">1 Month</option>\n      <option value=\"1y\">1 Year</option>\n      <option value=\"5y\">5 Years</option>\n    </select>\n    <div class=\"volatility-comparison\" ref=\"volatilityChart\"></div>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3';\n\nexport default {\n  name: 'VolatilityComparison',\n  data() {\n    return {\n      selectedTimeFrame: '1m',\n      originalData: []\n    };\n  },\n  mounted() {\n    this.fetchAndProcessData();\n  },\n  methods: {\n    fetchAndProcessData() {\n      fetch('volatility_comparison.json')\n        .then(response => response.json())\n        .then(rawData => {\n          console.log('Fetched data:', rawData);\n          if (rawData && rawData.length) {\n            this.originalData = rawData;\n            this.filterData();\n          } else {\n            console.error('Data is empty or not in expected format');\n          }\n        })\n        .catch(error => console.error('Error fetching data:', error));\n    },\n    filterData() {\n      const filteredData = this.filterByTimeFrame(this.originalData, this.selectedTimeFrame);\n      const transformedData = this.transformData(filteredData);\n      this.createVolatilityComparison(transformedData);\n    },\n    filterByTimeFrame(data, timeFrame) {\n      const endDate = new Date();\n      let startDate = new Date();\n      switch (timeFrame) {\n        case '1m':\n          startDate.setMonth(endDate.getMonth() - 1);\n          break;\n        case '1y':\n          startDate.setFullYear(endDate.getFullYear() - 1);\n          break;\n        case '5y':\n          startDate.setFullYear(endDate.getFullYear() - 5);\n          break;\n      }\n      return data.filter(d => new Date(d.date) >= startDate && new Date(d.date) <= endDate);\n    },\n    transformData(rawData) {\n      const groupedData = d3.groups(rawData, d => d.name)\n                           .map(([name, values]) => ({ name, values }));\n      return groupedData;\n    },\n    createVolatilityComparison(data) {\n      d3.select(this.$refs.volatilityChart).selectAll(\"*\").remove();\n\n      const margin = { top: 10, right: 30, bottom: 30, left: 50 },\n            width = 460 - margin.left - margin.right,\n            height = 400 - margin.top - margin.bottom;\n\n      const svg = d3.select(this.$refs.volatilityChart)\n        .append(\"svg\")\n          .attr(\"width\", width + margin.left + margin.right)\n          .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n          .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n      // Add X axis --> it is a date format\n      const x = d3.scaleTime()\n        .domain(d3.extent(this.originalData, d => new Date(d.date)))\n        .range([0, width]);\n      svg.append(\"g\")\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(d3.axisBottom(x));\n\n      // Add Y axis\n      const y = d3.scaleLinear()\n        .domain([0, d3.max(this.originalData, d => +d.value)])\n        .range([height, 0]);\n      svg.append(\"g\")\n        .call(d3.axisLeft(y));\n\n      // Color scale\n      const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n      // Draw the line for each group\n      data.forEach((crypto) => {\n        const line = d3.line()\n          .x(d => x(new Date(d.date)))\n          .y(d => y(+d.value));\n\n        svg.append(\"path\")\n          .datum(crypto.values)\n          .attr(\"fill\", \"none\")\n          .attr(\"stroke\", color(crypto.name))\n          .attr(\"stroke-width\", 1.5)\n          .attr(\"d\", line);\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.volatility-comparison {\n  width: 100%;\n  height: 400px;\n}\n</style>\n"],"mappings":";;gEAGMA,mBAAA,CAAmC;EAA3BC,KAAK,EAAC;AAAI,GAAC,SAAO;gEAC1BD,mBAAA,CAAkC;EAA1BC,KAAK,EAAC;AAAI,GAAC,QAAM;gEACzBD,mBAAA,CAAmC;EAA3BC,KAAK,EAAC;AAAI,GAAC,SAAO;oBAF1BC,UAAmC,EACnCC,UAAkC,EAClCC,UAAmC,C;;EAEhCC,KAAK,EAAC,uBAAuB;EAACC,GAAG,EAAC;;;uBANzCC,mBAAA,CAOM,c,gBANJP,mBAAA,CAIS;+DAJQQ,KAAA,CAAAC,iBAAiB,GAAAC,MAAA;IAAGC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;8EAAtCL,KAAA,CAAAC,iBAAiB,E,GAKlCT,mBAAA,CAA+D,OAA/DgB,UAA+D,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}