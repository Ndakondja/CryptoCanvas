{"ast":null,"code":"import axios from 'axios';\nimport config from './config';\nimport * as d3 from 'd3';\nexport default {\n  name: 'MarketCapTreeMap',\n  data() {\n    return {\n      marketCapData: []\n    };\n  },\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  mounted() {\n    this.fetchMarketCapData();\n  },\n  watch: {\n    selectedTimeRange() {\n      this.fetchMarketCapData();\n    },\n    selectedCoins() {\n      this.fetchMarketCapData();\n    }\n  },\n  methods: {\n    async fetchMarketCapData() {\n      try {\n        const response = await axios.get(`${config.backendApiUrl}/getMarketCapData`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        });\n        this.marketCapData = response.data;\n        this.drawTreemap();\n      } catch (error) {\n        console.error('Error fetching market cap data:', error);\n      }\n    },\n    drawTreemap() {\n      const data = this.marketCapData;\n      console.log('Drawing Treemap with Data:', this.marketCapData);\n\n      // Define dimensions and margins for the treemap\n      const margin = {\n        top: 10,\n        right: 10,\n        bottom: 10,\n        left: 10\n      };\n      const width = 960 - margin.left - margin.right;\n      const height = 500 - margin.top - margin.bottom;\n\n      // Remove any existing SVG to avoid overlaps\n      d3.select('#market-cap-treemap').select('svg').remove();\n\n      // Create an SVG container\n      const svg = d3.select('#market-cap-treemap').append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left},${margin.top})`);\n\n      // Create a hierarchy from the data and compute the treemap layout\n      const root = d3.hierarchy({\n        children: data\n      }).sum(d => d.marketCap) // Use marketCap for the area size\n      .sort((a, b) => b.height - a.height || b.value - a.value);\n      d3.treemap().size([width, height]).padding(1)(root);\n\n      // Define the color scale\n      const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n      // Draw rectangles for each node\n      const nodes = svg.selectAll('g').data(root.leaves()).enter().append('g').attr('transform', d => `translate(${d.x0},${d.y0})`);\n      nodes.append('rect').attr('width', d => d.x1 - d.x0).attr('height', d => d.y1 - d.y0).style('fill', d => color(d.data.name));\n\n      // Add titles to the rectangles\n      nodes.append('text').attr('x', 5).attr('y', 20).text(d => d.data.name).attr('font-size', '15px').attr('fill', 'white');\n    }\n  }\n};","map":{"version":3,"names":["axios","config","d3","name","data","marketCapData","props","selectedTimeRange","String","selectedCoins","Array","mounted","fetchMarketCapData","watch","methods","response","get","backendApiUrl","params","timeRange","coins","join","drawTreemap","error","console","log","margin","top","right","bottom","left","width","height","select","remove","svg","append","attr","root","hierarchy","children","sum","d","marketCap","sort","a","b","value","treemap","size","padding","color","scaleOrdinal","schemeCategory10","nodes","selectAll","leaves","enter","x0","y0","x1","y1","style","text"],"sources":["/Users/stefanstapelberg/Desktop/FSD_PROJECT/CryptoCanvas/crypto-canvas/src/components/MarketCapTreeMap.vue"],"sourcesContent":["<template>\n    <div>\n      <h2>Market Capitalization Treemap</h2>\n      <div id=\"market-cap-treemap\"></div> <!-- Container for the D3.js treemap -->\n    </div>\n  </template>\n\n<script>\nimport axios from 'axios'\nimport config from './config'\nimport * as d3 from 'd3'\n\nexport default {\n  name: 'MarketCapTreeMap',\n  data () {\n    return {\n      marketCapData: []\n    }\n  },\n  props: {\n    selectedTimeRange: String,\n    selectedCoins: Array\n  },\n  mounted () {\n    this.fetchMarketCapData()\n  },\n  watch: {\n    selectedTimeRange () {\n      this.fetchMarketCapData()\n    },\n    selectedCoins () {\n      this.fetchMarketCapData()\n    }\n  },\n  methods: {\n    async fetchMarketCapData () {\n      try {\n        const response = await axios.get(`${config.backendApiUrl}/getMarketCapData`, {\n          params: {\n            timeRange: this.selectedTimeRange,\n            coins: this.selectedCoins.join(',')\n          }\n        })\n        this.marketCapData = response.data\n        this.drawTreemap()\n      } catch (error) {\n        console.error('Error fetching market cap data:', error)\n      }\n    },\n    drawTreemap () {\n      const data = this.marketCapData\n      console.log('Drawing Treemap with Data:', this.marketCapData)\n\n      // Define dimensions and margins for the treemap\n      const margin = { top: 10, right: 10, bottom: 10, left: 10 }\n      const width = 960 - margin.left - margin.right\n      const height = 500 - margin.top - margin.bottom\n\n      // Remove any existing SVG to avoid overlaps\n      d3.select('#market-cap-treemap').select('svg').remove()\n\n      // Create an SVG container\n      const svg = d3.select('#market-cap-treemap')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform', `translate(${margin.left},${margin.top})`)\n\n      // Create a hierarchy from the data and compute the treemap layout\n      const root = d3.hierarchy({ children: data })\n        .sum(d => d.marketCap) // Use marketCap for the area size\n        .sort((a, b) => b.height - a.height || b.value - a.value)\n\n      d3.treemap()\n        .size([width, height])\n        .padding(1)(root)\n\n      // Define the color scale\n      const color = d3.scaleOrdinal(d3.schemeCategory10)\n\n      // Draw rectangles for each node\n      const nodes = svg.selectAll('g')\n        .data(root.leaves())\n        .enter()\n        .append('g')\n        .attr('transform', d => `translate(${d.x0},${d.y0})`)\n\n      nodes.append('rect')\n        .attr('width', d => d.x1 - d.x0)\n        .attr('height', d => d.y1 - d.y0)\n        .style('fill', d => color(d.data.name))\n\n      // Add titles to the rectangles\n      nodes.append('text')\n        .attr('x', 5)\n        .attr('y', 20)\n        .text(d => d.data.name)\n        .attr('font-size', '15px')\n        .attr('fill', 'white')\n    }\n  }\n}\n</script>\n\n  <style>\n  /* Add styling for your treemap here */\n  #market-cap-treemap svg {\n    font-family: 'Arial', sans-serif;\n  }\n  </style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}